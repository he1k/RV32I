[0m[[0m[0mdebug[0m] [0m[0m> Exec(testOnly PipedRVSpec, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / testOnly[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /Users/farfar/Desktop/PipeRV/target/scala-2.12/test-classes ...[0m
[0m[[0m[0minfo[0m] [0m[0mdone compiling[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 5.021 (61,0%) were spent in GC. [Heap: 0,36GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 6.741 (72,4%) were spent in GC. [Heap: 0,26GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 7.301 (84,0%) were spent in GC. [Heap: 0,17GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 8.012 (90,6%) were spent in GC. [Heap: 0,12GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 7.985 (94,1%) were spent in GC. [Heap: 0,09GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 8.873 (96,3%) were spent in GC. [Heap: 0,07GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 9.746 (98,0%) were spent in GC. [Heap: 0,06GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 9.097 (98,3%) were spent in GC. [Heap: 0,05GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 9.027 (99,1%) were spent in GC. [Heap: 0,05GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 8.615 (99,5%) were spent in GC. [Heap: 0,05GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 8.858 (99,5%) were spent in GC. [Heap: 0,05GB free of 1,46GB, max 1,46GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPipedRVSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCPU Wave[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31mPipedRVSpec *** ABORTED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.OutOfMemoryError: GC overhead limit exceeded[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.VectorPointer.gotoNextBlockStartWritable(Vector.scala:840)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.VectorPointer.gotoNextBlockStartWritable$(Vector.scala:837)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.VectorBuilder.gotoNextBlockStartWritable(Vector.scala:645)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.VectorBuilder.$plus$eq(Vector.scala:659)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.VectorBuilder.$plus$eq(Vector.scala:645)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:285)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.TraversableLike$$Lambda$21/1521826077.apply(Unknown Source)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.immutable.Range.foreach(Range.scala:158)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.TraversableLike.map(TraversableLike.scala:285)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.collection.TraversableLike.map$(TraversableLike.scala:278)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
