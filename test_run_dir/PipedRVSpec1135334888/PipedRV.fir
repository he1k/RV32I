;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PipedRV : 
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip rd : UInt<5>, flip din : SInt<32>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, reg1 : SInt<32>, reg2 : SInt<32>, regFile : SInt<32>[32]}
    
    wire _regFile_WIRE : SInt<32>[32] @[RegisterFile.scala 16:32]
    _regFile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    _regFile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 16:32]
    reg regFile : SInt<32>[32], clock with : (reset => (reset, _regFile_WIRE)) @[RegisterFile.scala 16:24]
    io.reg1 <= regFile[io.rs1] @[RegisterFile.scala 17:11]
    io.reg2 <= regFile[io.rs2] @[RegisterFile.scala 18:11]
    node _T = neq(io.rd, UInt<1>("h00")) @[RegisterFile.scala 19:23]
    node _T_1 = and(io.we, _T) @[RegisterFile.scala 19:14]
    when _T_1 : @[RegisterFile.scala 19:31]
      regFile[io.rd] <= io.din @[RegisterFile.scala 20:20]
      skip @[RegisterFile.scala 19:31]
    io.regFile[0] <= regFile[0] @[RegisterFile.scala 22:14]
    io.regFile[1] <= regFile[1] @[RegisterFile.scala 22:14]
    io.regFile[2] <= regFile[2] @[RegisterFile.scala 22:14]
    io.regFile[3] <= regFile[3] @[RegisterFile.scala 22:14]
    io.regFile[4] <= regFile[4] @[RegisterFile.scala 22:14]
    io.regFile[5] <= regFile[5] @[RegisterFile.scala 22:14]
    io.regFile[6] <= regFile[6] @[RegisterFile.scala 22:14]
    io.regFile[7] <= regFile[7] @[RegisterFile.scala 22:14]
    io.regFile[8] <= regFile[8] @[RegisterFile.scala 22:14]
    io.regFile[9] <= regFile[9] @[RegisterFile.scala 22:14]
    io.regFile[10] <= regFile[10] @[RegisterFile.scala 22:14]
    io.regFile[11] <= regFile[11] @[RegisterFile.scala 22:14]
    io.regFile[12] <= regFile[12] @[RegisterFile.scala 22:14]
    io.regFile[13] <= regFile[13] @[RegisterFile.scala 22:14]
    io.regFile[14] <= regFile[14] @[RegisterFile.scala 22:14]
    io.regFile[15] <= regFile[15] @[RegisterFile.scala 22:14]
    io.regFile[16] <= regFile[16] @[RegisterFile.scala 22:14]
    io.regFile[17] <= regFile[17] @[RegisterFile.scala 22:14]
    io.regFile[18] <= regFile[18] @[RegisterFile.scala 22:14]
    io.regFile[19] <= regFile[19] @[RegisterFile.scala 22:14]
    io.regFile[20] <= regFile[20] @[RegisterFile.scala 22:14]
    io.regFile[21] <= regFile[21] @[RegisterFile.scala 22:14]
    io.regFile[22] <= regFile[22] @[RegisterFile.scala 22:14]
    io.regFile[23] <= regFile[23] @[RegisterFile.scala 22:14]
    io.regFile[24] <= regFile[24] @[RegisterFile.scala 22:14]
    io.regFile[25] <= regFile[25] @[RegisterFile.scala 22:14]
    io.regFile[26] <= regFile[26] @[RegisterFile.scala 22:14]
    io.regFile[27] <= regFile[27] @[RegisterFile.scala 22:14]
    io.regFile[28] <= regFile[28] @[RegisterFile.scala 22:14]
    io.regFile[29] <= regFile[29] @[RegisterFile.scala 22:14]
    io.regFile[30] <= regFile[30] @[RegisterFile.scala 22:14]
    io.regFile[31] <= regFile[31] @[RegisterFile.scala 22:14]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip op : UInt<3>, flip a : SInt<32>, flip b : SInt<32>, y : SInt<32>, eq : UInt<1>, lt : UInt<1>, ltu : UInt<1>}
    
    wire a : SInt
    a <= io.a
    wire b : SInt
    b <= io.b
    wire y : SInt<32>
    y <= asSInt(UInt<32>("h00"))
    node _T = eq(UInt<1>("h00"), io.op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _y_T = add(a, b) @[ALU.scala 20:25]
      node _y_T_1 = tail(_y_T, 1) @[ALU.scala 20:25]
      node _y_T_2 = asSInt(_y_T_1) @[ALU.scala 20:25]
      y <= _y_T_2 @[ALU.scala 20:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _y_T_3 = sub(a, b) @[ALU.scala 21:25]
        node _y_T_4 = tail(_y_T_3, 1) @[ALU.scala 21:25]
        node _y_T_5 = asSInt(_y_T_4) @[ALU.scala 21:25]
        y <= _y_T_5 @[ALU.scala 21:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _y_T_6 = bits(b, 4, 0) @[ALU.scala 22:29]
          node _y_T_7 = dshl(a, _y_T_6) @[ALU.scala 22:25]
          y <= _y_T_7 @[ALU.scala 22:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _y_T_8 = xor(a, b) @[ALU.scala 23:25]
            node _y_T_9 = asSInt(_y_T_8) @[ALU.scala 23:25]
            y <= _y_T_9 @[ALU.scala 23:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _y_T_10 = asUInt(a) @[ALU.scala 24:32]
              node _y_T_11 = bits(b, 4, 0) @[ALU.scala 24:39]
              node _y_T_12 = dshr(_y_T_10, _y_T_11) @[ALU.scala 24:35]
              node _y_T_13 = asSInt(_y_T_12) @[ALU.scala 24:52]
              y <= _y_T_13 @[ALU.scala 24:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _y_T_14 = bits(b, 4, 0) @[ALU.scala 25:29]
                node _y_T_15 = dshr(a, _y_T_14) @[ALU.scala 25:25]
                y <= _y_T_15 @[ALU.scala 25:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.op) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  node _y_T_16 = or(a, b) @[ALU.scala 26:24]
                  node _y_T_17 = asSInt(_y_T_16) @[ALU.scala 26:24]
                  y <= _y_T_17 @[ALU.scala 26:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.op) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _y_T_18 = and(a, b) @[ALU.scala 27:25]
                    node _y_T_19 = asSInt(_y_T_18) @[ALU.scala 27:25]
                    y <= _y_T_19 @[ALU.scala 27:20]
                    skip @[Conditional.scala 39:67]
    node _io_eq_T = eq(a, b) @[ALU.scala 29:14]
    io.eq <= _io_eq_T @[ALU.scala 29:9]
    node _io_lt_T = lt(a, b) @[ALU.scala 30:14]
    io.lt <= _io_lt_T @[ALU.scala 30:9]
    node _io_ltu_T = asUInt(a) @[ALU.scala 31:21]
    node _io_ltu_T_1 = asUInt(b) @[ALU.scala 31:34]
    node _io_ltu_T_2 = lt(_io_ltu_T, _io_ltu_T_1) @[ALU.scala 31:24]
    io.ltu <= _io_ltu_T_2 @[ALU.scala 31:10]
    io.y <= y @[ALU.scala 32:8]
    
  module InstructionDecoder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst : UInt<32>, ctrlop : UInt<6>, rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, im : UInt<1>}
    
    node _funct3_T = bits(io.inst, 14, 12) @[InstructionDecoder.scala 16:35]
    wire funct3 : UInt
    funct3 <= _funct3_T
    node _funct7_T = bits(io.inst, 31, 25) @[InstructionDecoder.scala 17:35]
    wire funct7 : UInt
    funct7 <= _funct7_T
    node _op_T = bits(io.inst, 6, 0) @[InstructionDecoder.scala 18:31]
    wire op : UInt
    op <= _op_T
    io.im <= UInt<1>("h00") @[InstructionDecoder.scala 20:9]
    io.ctrlop <= UInt<1>("h00") @[InstructionDecoder.scala 21:13]
    node _io_rd_T = bits(io.inst, 11, 7) @[InstructionDecoder.scala 22:19]
    io.rd <= _io_rd_T @[InstructionDecoder.scala 22:9]
    node _io_rs1_T = bits(io.inst, 19, 15) @[InstructionDecoder.scala 23:20]
    io.rs1 <= _io_rs1_T @[InstructionDecoder.scala 23:10]
    node _io_rs2_T = bits(io.inst, 24, 20) @[InstructionDecoder.scala 24:20]
    io.rs2 <= _io_rs2_T @[InstructionDecoder.scala 24:10]
    node _T = eq(UInt<6>("h033"), op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = cat(funct3, funct7) @[InstructionDecoder.scala 29:21]
      node _T_2 = eq(UInt<1>("h00"), _T_1) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 40:58]
        io.ctrlop <= UInt<1>("h00") @[InstructionDecoder.scala 30:40]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<6>("h020"), _T_1) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          io.ctrlop <= UInt<1>("h01") @[InstructionDecoder.scala 31:40]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<8>("h080"), _T_1) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            io.ctrlop <= UInt<2>("h02") @[InstructionDecoder.scala 32:40]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_5 = eq(UInt<10>("h0200"), _T_1) @[Conditional.scala 37:30]
            when _T_5 : @[Conditional.scala 39:67]
              io.ctrlop <= UInt<2>("h03") @[InstructionDecoder.scala 33:40]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_6 = eq(UInt<10>("h0280"), _T_1) @[Conditional.scala 37:30]
              when _T_6 : @[Conditional.scala 39:67]
                io.ctrlop <= UInt<3>("h04") @[InstructionDecoder.scala 34:40]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_7 = eq(UInt<10>("h02a0"), _T_1) @[Conditional.scala 37:30]
                when _T_7 : @[Conditional.scala 39:67]
                  io.ctrlop <= UInt<3>("h05") @[InstructionDecoder.scala 35:40]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_8 = eq(UInt<10>("h0300"), _T_1) @[Conditional.scala 37:30]
                  when _T_8 : @[Conditional.scala 39:67]
                    io.ctrlop <= UInt<3>("h06") @[InstructionDecoder.scala 36:40]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_9 = eq(UInt<10>("h0380"), _T_1) @[Conditional.scala 37:30]
                    when _T_9 : @[Conditional.scala 39:67]
                      io.ctrlop <= UInt<3>("h07") @[InstructionDecoder.scala 37:40]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_10 = eq(UInt<9>("h0100"), _T_1) @[Conditional.scala 37:30]
                      when _T_10 : @[Conditional.scala 39:67]
                        io.ctrlop <= UInt<4>("h08") @[InstructionDecoder.scala 38:40]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_11 = eq(UInt<9>("h0180"), _T_1) @[Conditional.scala 37:30]
                        when _T_11 : @[Conditional.scala 39:67]
                          io.ctrlop <= UInt<4>("h09") @[InstructionDecoder.scala 39:40]
                          skip @[Conditional.scala 39:67]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_12 = eq(UInt<7>("h063"), op) @[Conditional.scala 37:30]
      when _T_12 : @[Conditional.scala 39:67]
        node _T_13 = eq(UInt<1>("h00"), funct3) @[Conditional.scala 37:30]
        when _T_13 : @[Conditional.scala 40:58]
          io.ctrlop <= UInt<5>("h01d") @[InstructionDecoder.scala 45:33]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_14 = eq(UInt<1>("h01"), funct3) @[Conditional.scala 37:30]
          when _T_14 : @[Conditional.scala 39:67]
            io.ctrlop <= UInt<5>("h01e") @[InstructionDecoder.scala 46:33]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h04"), funct3) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              io.ctrlop <= UInt<5>("h01f") @[InstructionDecoder.scala 47:33]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_16 = eq(UInt<3>("h05"), funct3) @[Conditional.scala 37:30]
              when _T_16 : @[Conditional.scala 39:67]
                io.ctrlop <= UInt<6>("h020") @[InstructionDecoder.scala 48:33]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_17 = eq(UInt<3>("h06"), funct3) @[Conditional.scala 37:30]
                when _T_17 : @[Conditional.scala 39:67]
                  io.ctrlop <= UInt<6>("h021") @[InstructionDecoder.scala 49:33]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_18 = eq(UInt<3>("h07"), funct3) @[Conditional.scala 37:30]
                  when _T_18 : @[Conditional.scala 39:67]
                    io.ctrlop <= UInt<6>("h022") @[InstructionDecoder.scala 50:33]
                    skip @[Conditional.scala 39:67]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_19 = eq(UInt<6>("h023"), op) @[Conditional.scala 37:30]
        when _T_19 : @[Conditional.scala 39:67]
          io.im <= UInt<1>("h01") @[InstructionDecoder.scala 55:13]
          node _T_20 = eq(UInt<1>("h00"), funct3) @[Conditional.scala 37:30]
          when _T_20 : @[Conditional.scala 40:58]
            io.ctrlop <= UInt<5>("h019") @[InstructionDecoder.scala 57:33]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_21 = eq(UInt<1>("h01"), funct3) @[Conditional.scala 37:30]
            when _T_21 : @[Conditional.scala 39:67]
              io.ctrlop <= UInt<5>("h01a") @[InstructionDecoder.scala 58:33]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_22 = eq(UInt<2>("h02"), funct3) @[Conditional.scala 37:30]
              when _T_22 : @[Conditional.scala 39:67]
                io.ctrlop <= UInt<5>("h01b") @[InstructionDecoder.scala 59:33]
                skip @[Conditional.scala 39:67]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_23 = eq(UInt<7>("h06f"), op) @[Conditional.scala 37:30]
          when _T_23 : @[Conditional.scala 39:67]
            io.ctrlop <= UInt<6>("h023") @[InstructionDecoder.scala 64:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_24 = eq(UInt<6>("h037"), op) @[Conditional.scala 37:30]
            when _T_24 : @[Conditional.scala 39:67]
              io.im <= UInt<1>("h01") @[InstructionDecoder.scala 68:13]
              io.ctrlop <= UInt<6>("h025") @[InstructionDecoder.scala 69:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_25 = eq(UInt<5>("h017"), op) @[Conditional.scala 37:30]
              when _T_25 : @[Conditional.scala 39:67]
                io.im <= UInt<1>("h01") @[InstructionDecoder.scala 73:13]
                io.ctrlop <= UInt<6>("h026") @[InstructionDecoder.scala 74:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_26 = eq(UInt<2>("h03"), op) @[Conditional.scala 37:30]
                when _T_26 : @[Conditional.scala 39:67]
                  io.im <= UInt<1>("h01") @[InstructionDecoder.scala 78:13]
                  node _T_27 = eq(UInt<1>("h00"), funct3) @[Conditional.scala 37:30]
                  when _T_27 : @[Conditional.scala 40:58]
                    io.ctrlop <= UInt<4>("h0a") @[InstructionDecoder.scala 80:33]
                    skip @[Conditional.scala 40:58]
                  else : @[Conditional.scala 39:67]
                    node _T_28 = eq(UInt<1>("h01"), funct3) @[Conditional.scala 37:30]
                    when _T_28 : @[Conditional.scala 39:67]
                      io.ctrlop <= UInt<4>("h0b") @[InstructionDecoder.scala 81:33]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_29 = eq(UInt<2>("h02"), funct3) @[Conditional.scala 37:30]
                      when _T_29 : @[Conditional.scala 39:67]
                        io.ctrlop <= UInt<4>("h0c") @[InstructionDecoder.scala 82:33]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_30 = eq(UInt<3>("h04"), funct3) @[Conditional.scala 37:30]
                        when _T_30 : @[Conditional.scala 39:67]
                          io.ctrlop <= UInt<4>("h0d") @[InstructionDecoder.scala 83:33]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_31 = eq(UInt<3>("h05"), funct3) @[Conditional.scala 37:30]
                          when _T_31 : @[Conditional.scala 39:67]
                            io.ctrlop <= UInt<4>("h0e") @[InstructionDecoder.scala 84:33]
                            skip @[Conditional.scala 39:67]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_32 = eq(UInt<5>("h013"), op) @[Conditional.scala 37:30]
                  when _T_32 : @[Conditional.scala 39:67]
                    io.im <= UInt<1>("h01") @[InstructionDecoder.scala 89:13]
                    node _T_33 = eq(UInt<1>("h00"), funct3) @[Conditional.scala 37:30]
                    when _T_33 : @[Conditional.scala 40:58]
                      io.ctrlop <= UInt<4>("h0f") @[InstructionDecoder.scala 91:33]
                      skip @[Conditional.scala 40:58]
                    else : @[Conditional.scala 39:67]
                      node _T_34 = eq(UInt<2>("h02"), funct3) @[Conditional.scala 37:30]
                      when _T_34 : @[Conditional.scala 39:67]
                        io.ctrlop <= UInt<5>("h016") @[InstructionDecoder.scala 92:33]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_35 = eq(UInt<2>("h03"), funct3) @[Conditional.scala 37:30]
                        when _T_35 : @[Conditional.scala 39:67]
                          io.ctrlop <= UInt<5>("h017") @[InstructionDecoder.scala 93:33]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_36 = eq(UInt<3>("h04"), funct3) @[Conditional.scala 37:30]
                          when _T_36 : @[Conditional.scala 39:67]
                            io.ctrlop <= UInt<5>("h011") @[InstructionDecoder.scala 94:33]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_37 = eq(UInt<1>("h01"), funct3) @[Conditional.scala 37:30]
                            when _T_37 : @[Conditional.scala 39:67]
                              node _T_38 = eq(funct7, UInt<1>("h00")) @[InstructionDecoder.scala 96:23]
                              when _T_38 : @[InstructionDecoder.scala 96:40]
                                io.ctrlop <= UInt<5>("h010") @[InstructionDecoder.scala 97:23]
                                skip @[InstructionDecoder.scala 96:40]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_39 = eq(UInt<3>("h05"), funct3) @[Conditional.scala 37:30]
                              when _T_39 : @[Conditional.scala 39:67]
                                node _T_40 = eq(funct7, UInt<1>("h00")) @[InstructionDecoder.scala 101:23]
                                when _T_40 : @[InstructionDecoder.scala 101:40]
                                  io.ctrlop <= UInt<5>("h012") @[InstructionDecoder.scala 102:23]
                                  skip @[InstructionDecoder.scala 101:40]
                                else : @[InstructionDecoder.scala 103:48]
                                  node _T_41 = eq(funct7, UInt<6>("h020")) @[InstructionDecoder.scala 103:31]
                                  when _T_41 : @[InstructionDecoder.scala 103:48]
                                    io.ctrlop <= UInt<5>("h013") @[InstructionDecoder.scala 104:23]
                                    skip @[InstructionDecoder.scala 103:48]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_42 = eq(UInt<3>("h06"), funct3) @[Conditional.scala 37:30]
                                when _T_42 : @[Conditional.scala 39:67]
                                  io.ctrlop <= UInt<5>("h014") @[InstructionDecoder.scala 107:33]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_43 = eq(UInt<3>("h07"), funct3) @[Conditional.scala 37:30]
                                  when _T_43 : @[Conditional.scala 39:67]
                                    io.ctrlop <= UInt<5>("h015") @[InstructionDecoder.scala 108:33]
                                    skip @[Conditional.scala 39:67]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_44 = eq(UInt<7>("h067"), op) @[Conditional.scala 37:30]
                    when _T_44 : @[Conditional.scala 39:67]
                      node _T_45 = eq(funct3, UInt<1>("h00")) @[InstructionDecoder.scala 113:19]
                      when _T_45 : @[InstructionDecoder.scala 113:32]
                        io.ctrlop <= UInt<6>("h024") @[InstructionDecoder.scala 113:44]
                        skip @[InstructionDecoder.scala 113:32]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_46 = eq(UInt<7>("h073"), op) @[Conditional.scala 37:30]
                      when _T_46 : @[Conditional.scala 39:67]
                        node _T_47 = bits(io.inst, 31, 7) @[InstructionDecoder.scala 117:19]
                        node _T_48 = eq(_T_47, UInt<1>("h00")) @[InstructionDecoder.scala 117:26]
                        when _T_48 : @[InstructionDecoder.scala 117:34]
                          io.ctrlop <= UInt<5>("h018") @[InstructionDecoder.scala 117:46]
                          skip @[InstructionDecoder.scala 117:34]
                        skip @[Conditional.scala 39:67]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip op : UInt<6>, flip im : UInt<1>, aluop : UInt<3>, branch : UInt<3>, jump : UInt<2>, sela : UInt<1>, selb : UInt<2>, sely : UInt<2>, regWE : UInt<1>, memWE : UInt<1>, memRE : UInt<1>, bytes : UInt<2>, sign : UInt<1>, ecll : UInt<1>}
    
    io.aluop <= UInt<1>("h00") @[Control.scala 24:12]
    node _T = eq(io.op, UInt<1>("h01")) @[Control.scala 25:14]
    when _T : @[Control.scala 25:28]
      io.aluop <= UInt<1>("h01") @[Control.scala 26:14]
      skip @[Control.scala 25:28]
    else : @[Control.scala 27:57]
      node _T_1 = eq(io.op, UInt<2>("h02")) @[Control.scala 27:20]
      node _T_2 = eq(io.op, UInt<5>("h010")) @[Control.scala 27:42]
      node _T_3 = or(_T_1, _T_2) @[Control.scala 27:33]
      when _T_3 : @[Control.scala 27:57]
        io.aluop <= UInt<2>("h02") @[Control.scala 28:14]
        skip @[Control.scala 27:57]
      else : @[Control.scala 29:57]
        node _T_4 = eq(io.op, UInt<3>("h04")) @[Control.scala 29:20]
        node _T_5 = eq(io.op, UInt<5>("h012")) @[Control.scala 29:42]
        node _T_6 = or(_T_4, _T_5) @[Control.scala 29:33]
        when _T_6 : @[Control.scala 29:57]
          io.aluop <= UInt<3>("h04") @[Control.scala 30:14]
          skip @[Control.scala 29:57]
        else : @[Control.scala 31:57]
          node _T_7 = eq(io.op, UInt<3>("h05")) @[Control.scala 31:20]
          node _T_8 = eq(io.op, UInt<5>("h013")) @[Control.scala 31:42]
          node _T_9 = or(_T_7, _T_8) @[Control.scala 31:33]
          when _T_9 : @[Control.scala 31:57]
            io.aluop <= UInt<3>("h05") @[Control.scala 32:14]
            skip @[Control.scala 31:57]
          else : @[Control.scala 33:57]
            node _T_10 = eq(io.op, UInt<2>("h03")) @[Control.scala 33:20]
            node _T_11 = eq(io.op, UInt<5>("h011")) @[Control.scala 33:42]
            node _T_12 = or(_T_10, _T_11) @[Control.scala 33:33]
            when _T_12 : @[Control.scala 33:57]
              io.aluop <= UInt<2>("h03") @[Control.scala 34:14]
              skip @[Control.scala 33:57]
            else : @[Control.scala 35:55]
              node _T_13 = eq(io.op, UInt<3>("h06")) @[Control.scala 35:20]
              node _T_14 = eq(io.op, UInt<5>("h014")) @[Control.scala 35:41]
              node _T_15 = or(_T_13, _T_14) @[Control.scala 35:32]
              when _T_15 : @[Control.scala 35:55]
                io.aluop <= UInt<3>("h06") @[Control.scala 36:14]
                skip @[Control.scala 35:55]
              else : @[Control.scala 37:57]
                node _T_16 = eq(io.op, UInt<3>("h07")) @[Control.scala 37:20]
                node _T_17 = eq(io.op, UInt<5>("h015")) @[Control.scala 37:42]
                node _T_18 = or(_T_16, _T_17) @[Control.scala 37:33]
                when _T_18 : @[Control.scala 37:57]
                  io.aluop <= UInt<3>("h07") @[Control.scala 38:14]
                  skip @[Control.scala 37:57]
    io.branch <= UInt<1>("h00") @[Control.scala 42:13]
    node _T_19 = eq(UInt<5>("h01d"), io.op) @[Conditional.scala 37:30]
    when _T_19 : @[Conditional.scala 40:58]
      io.branch <= UInt<1>("h01") @[Control.scala 44:28]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_20 = eq(UInt<5>("h01e"), io.op) @[Conditional.scala 37:30]
      when _T_20 : @[Conditional.scala 39:67]
        io.branch <= UInt<2>("h02") @[Control.scala 45:28]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_21 = eq(UInt<5>("h01f"), io.op) @[Conditional.scala 37:30]
        when _T_21 : @[Conditional.scala 39:67]
          io.branch <= UInt<2>("h03") @[Control.scala 46:28]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_22 = eq(UInt<6>("h020"), io.op) @[Conditional.scala 37:30]
          when _T_22 : @[Conditional.scala 39:67]
            io.branch <= UInt<3>("h04") @[Control.scala 47:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_23 = eq(UInt<6>("h021"), io.op) @[Conditional.scala 37:30]
            when _T_23 : @[Conditional.scala 39:67]
              io.branch <= UInt<3>("h05") @[Control.scala 48:29]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_24 = eq(UInt<6>("h022"), io.op) @[Conditional.scala 37:30]
              when _T_24 : @[Conditional.scala 39:67]
                io.branch <= UInt<3>("h06") @[Control.scala 49:29]
                skip @[Conditional.scala 39:67]
    io.jump <= UInt<1>("h00") @[Control.scala 52:11]
    node _T_25 = eq(io.op, UInt<6>("h023")) @[Control.scala 53:14]
    when _T_25 : @[Control.scala 53:27]
      io.jump <= UInt<1>("h01") @[Control.scala 53:36]
      skip @[Control.scala 53:27]
    else : @[Control.scala 54:35]
      node _T_26 = eq(io.op, UInt<6>("h024")) @[Control.scala 54:21]
      when _T_26 : @[Control.scala 54:35]
        io.jump <= UInt<2>("h02") @[Control.scala 54:44]
        skip @[Control.scala 54:35]
    io.sely <= UInt<1>("h00") @[Control.scala 57:11]
    node _T_27 = eq(io.op, UInt<4>("h08")) @[Control.scala 58:14]
    node _T_28 = eq(io.op, UInt<5>("h016")) @[Control.scala 58:36]
    node _T_29 = or(_T_27, _T_28) @[Control.scala 58:27]
    when _T_29 : @[Control.scala 58:50]
      io.sely <= UInt<1>("h01") @[Control.scala 59:13]
      skip @[Control.scala 58:50]
    node _T_30 = eq(io.op, UInt<4>("h09")) @[Control.scala 61:14]
    node _T_31 = eq(io.op, UInt<5>("h017")) @[Control.scala 61:37]
    node _T_32 = or(_T_30, _T_31) @[Control.scala 61:28]
    when _T_32 : @[Control.scala 61:52]
      io.sely <= UInt<2>("h02") @[Control.scala 62:13]
      skip @[Control.scala 61:52]
    node _io_sela_T = eq(io.op, UInt<6>("h026")) @[Control.scala 66:21]
    node _io_sela_T_1 = neq(io.jump, UInt<1>("h00")) @[Control.scala 66:49]
    node _io_sela_T_2 = or(_io_sela_T, _io_sela_T_1) @[Control.scala 66:37]
    io.sela <= _io_sela_T_2 @[Control.scala 66:11]
    io.selb <= UInt<1>("h00") @[Control.scala 69:11]
    node _T_33 = neq(io.jump, UInt<1>("h00")) @[Control.scala 70:16]
    when _T_33 : @[Control.scala 70:24]
      io.selb <= UInt<1>("h01") @[Control.scala 71:13]
      skip @[Control.scala 70:24]
    else : @[Control.scala 72:22]
      when io.im : @[Control.scala 72:22]
        io.selb <= UInt<2>("h02") @[Control.scala 73:13]
        skip @[Control.scala 72:22]
    node _io_regWE_T = leq(io.op, UInt<6>("h022")) @[Control.scala 76:23]
    node _io_regWE_T_1 = geq(io.op, UInt<5>("h018")) @[Control.scala 76:45]
    node _io_regWE_T_2 = and(_io_regWE_T, _io_regWE_T_1) @[Control.scala 76:36]
    node _io_regWE_T_3 = eq(_io_regWE_T_2, UInt<1>("h00")) @[Control.scala 76:15]
    io.regWE <= _io_regWE_T_3 @[Control.scala 76:12]
    node _io_memWE_T = geq(io.op, UInt<5>("h019")) @[Control.scala 78:21]
    node _io_memWE_T_1 = leq(io.op, UInt<5>("h01b")) @[Control.scala 78:41]
    node _io_memWE_T_2 = and(_io_memWE_T, _io_memWE_T_1) @[Control.scala 78:32]
    io.memWE <= _io_memWE_T_2 @[Control.scala 78:12]
    io.bytes <= UInt<2>("h03") @[Control.scala 80:12]
    node _T_34 = eq(io.op, UInt<5>("h019")) @[Control.scala 81:14]
    node _T_35 = eq(io.op, UInt<4>("h0a")) @[Control.scala 81:35]
    node _T_36 = or(_T_34, _T_35) @[Control.scala 81:26]
    node _T_37 = eq(io.op, UInt<4>("h0d")) @[Control.scala 81:56]
    node _T_38 = or(_T_36, _T_37) @[Control.scala 81:47]
    when _T_38 : @[Control.scala 81:69]
      io.bytes <= UInt<1>("h01") @[Control.scala 82:14]
      skip @[Control.scala 81:69]
    else : @[Control.scala 83:77]
      node _T_39 = eq(io.op, UInt<5>("h01a")) @[Control.scala 83:22]
      node _T_40 = eq(io.op, UInt<4>("h0b")) @[Control.scala 83:43]
      node _T_41 = or(_T_39, _T_40) @[Control.scala 83:34]
      node _T_42 = eq(io.op, UInt<4>("h0e")) @[Control.scala 83:64]
      node _T_43 = or(_T_41, _T_42) @[Control.scala 83:55]
      when _T_43 : @[Control.scala 83:77]
        io.bytes <= UInt<2>("h02") @[Control.scala 84:14]
        skip @[Control.scala 83:77]
    node _io_sign_T = leq(io.op, UInt<4>("h0e")) @[Control.scala 87:22]
    node _io_sign_T_1 = geq(io.op, UInt<4>("h0d")) @[Control.scala 87:43]
    node _io_sign_T_2 = and(_io_sign_T, _io_sign_T_1) @[Control.scala 87:34]
    node _io_sign_T_3 = eq(_io_sign_T_2, UInt<1>("h00")) @[Control.scala 87:14]
    io.sign <= _io_sign_T_3 @[Control.scala 87:11]
    node _io_memRE_T = geq(io.op, UInt<4>("h0a")) @[Control.scala 89:21]
    node _io_memRE_T_1 = leq(io.op, UInt<4>("h0e")) @[Control.scala 89:41]
    node _io_memRE_T_2 = and(_io_memRE_T, _io_memRE_T_1) @[Control.scala 89:32]
    io.memRE <= _io_memRE_T_2 @[Control.scala 89:12]
    node _io_ecll_T = eq(io.op, UInt<5>("h018")) @[Control.scala 91:20]
    io.ecll <= _io_ecll_T @[Control.scala 91:11]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {forwardEXA : UInt<2>, forwardEXB : UInt<2>, forwardIDA : UInt<1>, forwardIDB : UInt<1>, flip exmem : {regWE : UInt<1>, rd : UInt<5>}, flip memwb : {regWE : UInt<1>, rd : UInt<5>}, flip idex : {rs1 : UInt<5>, rs2 : UInt<5>}, flip ifid : {rs1 : UInt<5>, rs2 : UInt<5>}}
    
    node _exHazardA_T = neq(io.exmem.rd, UInt<1>("h00")) @[ForwardingUnit.scala 31:49]
    node _exHazardA_T_1 = and(io.exmem.regWE, _exHazardA_T) @[ForwardingUnit.scala 31:34]
    node _exHazardA_T_2 = eq(io.exmem.rd, io.idex.rs1) @[ForwardingUnit.scala 31:72]
    node exHazardA = and(_exHazardA_T_1, _exHazardA_T_2) @[ForwardingUnit.scala 31:57]
    node _exHazardB_T = neq(io.exmem.rd, UInt<1>("h00")) @[ForwardingUnit.scala 32:49]
    node _exHazardB_T_1 = and(io.exmem.regWE, _exHazardB_T) @[ForwardingUnit.scala 32:34]
    node _exHazardB_T_2 = eq(io.exmem.rd, io.idex.rs2) @[ForwardingUnit.scala 32:72]
    node exHazardB = and(_exHazardB_T_1, _exHazardB_T_2) @[ForwardingUnit.scala 32:57]
    node _memHazardA_T = eq(exHazardA, UInt<1>("h00")) @[ForwardingUnit.scala 33:20]
    node _memHazardA_T_1 = and(_memHazardA_T, io.memwb.regWE) @[ForwardingUnit.scala 33:31]
    node _memHazardA_T_2 = neq(io.memwb.rd, UInt<1>("h00")) @[ForwardingUnit.scala 33:64]
    node _memHazardA_T_3 = and(_memHazardA_T_1, _memHazardA_T_2) @[ForwardingUnit.scala 33:49]
    node _memHazardA_T_4 = eq(io.memwb.rd, io.idex.rs1) @[ForwardingUnit.scala 33:87]
    node memHazardA = and(_memHazardA_T_3, _memHazardA_T_4) @[ForwardingUnit.scala 33:72]
    node _memHazardB_T = eq(exHazardB, UInt<1>("h00")) @[ForwardingUnit.scala 34:20]
    node _memHazardB_T_1 = and(_memHazardB_T, io.memwb.regWE) @[ForwardingUnit.scala 34:31]
    node _memHazardB_T_2 = neq(io.memwb.rd, UInt<1>("h00")) @[ForwardingUnit.scala 34:64]
    node _memHazardB_T_3 = and(_memHazardB_T_1, _memHazardB_T_2) @[ForwardingUnit.scala 34:49]
    node _memHazardB_T_4 = eq(io.memwb.rd, io.idex.rs2) @[ForwardingUnit.scala 34:87]
    node memHazardB = and(_memHazardB_T_3, _memHazardB_T_4) @[ForwardingUnit.scala 34:72]
    node _idhazardA_T = neq(io.memwb.rd, UInt<1>("h00")) @[ForwardingUnit.scala 35:49]
    node _idhazardA_T_1 = and(io.memwb.regWE, _idhazardA_T) @[ForwardingUnit.scala 35:34]
    node _idhazardA_T_2 = eq(io.memwb.rd, io.ifid.rs1) @[ForwardingUnit.scala 35:72]
    node idhazardA = and(_idhazardA_T_1, _idhazardA_T_2) @[ForwardingUnit.scala 35:57]
    node _idhazardB_T = neq(io.memwb.rd, UInt<1>("h00")) @[ForwardingUnit.scala 36:49]
    node _idhazardB_T_1 = and(io.memwb.regWE, _idhazardB_T) @[ForwardingUnit.scala 36:34]
    node _idhazardB_T_2 = eq(io.memwb.rd, io.ifid.rs2) @[ForwardingUnit.scala 36:72]
    node idhazardB = and(_idhazardB_T_1, _idhazardB_T_2) @[ForwardingUnit.scala 36:57]
    io.forwardEXA <= UInt<1>("h00") @[ForwardingUnit.scala 38:17]
    when memHazardA : @[ForwardingUnit.scala 39:19]
      io.forwardEXA <= UInt<1>("h01") @[ForwardingUnit.scala 39:35]
      skip @[ForwardingUnit.scala 39:19]
    when exHazardA : @[ForwardingUnit.scala 40:18]
      io.forwardEXA <= UInt<2>("h02") @[ForwardingUnit.scala 40:34]
      skip @[ForwardingUnit.scala 40:18]
    io.forwardEXB <= UInt<1>("h00") @[ForwardingUnit.scala 41:17]
    when memHazardB : @[ForwardingUnit.scala 42:19]
      io.forwardEXB <= UInt<1>("h01") @[ForwardingUnit.scala 42:35]
      skip @[ForwardingUnit.scala 42:19]
    when exHazardB : @[ForwardingUnit.scala 43:18]
      io.forwardEXB <= UInt<2>("h02") @[ForwardingUnit.scala 43:34]
      skip @[ForwardingUnit.scala 43:18]
    io.forwardIDA <= idhazardA @[ForwardingUnit.scala 44:17]
    io.forwardIDB <= idhazardB @[ForwardingUnit.scala 45:17]
    
  module HazardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {idex : {flip memRE : UInt<1>, flip rd : UInt<5>}, ifid : {flip rs1 : UInt<5>, flip rs2 : UInt<5>}, stall : UInt<1>}
    
    io.stall <= UInt<1>("h00") @[HazardUnit.scala 18:12]
    node _hazard_T = neq(io.idex.rd, UInt<1>("h00")) @[HazardUnit.scala 19:44]
    node _hazard_T_1 = and(io.idex.memRE, _hazard_T) @[HazardUnit.scala 19:30]
    node _hazard_T_2 = eq(io.idex.rd, io.ifid.rs1) @[HazardUnit.scala 19:67]
    node _hazard_T_3 = eq(io.idex.rd, io.ifid.rs2) @[HazardUnit.scala 19:97]
    node _hazard_T_4 = or(_hazard_T_2, _hazard_T_3) @[HazardUnit.scala 19:83]
    node hazard = and(_hazard_T_1, _hazard_T_4) @[HazardUnit.scala 19:52]
    when hazard : @[HazardUnit.scala 20:15]
      io.stall <= UInt<1>("h01") @[HazardUnit.scala 21:14]
      skip @[HazardUnit.scala 20:15]
    
  module ImmGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst : UInt<32>, immed : UInt<32>}
    
    node _op_T = bits(io.inst, 6, 0) @[ImmGen.scala 9:31]
    wire op : UInt
    op <= _op_T
    node _funct3_T = bits(io.inst, 14, 12) @[ImmGen.scala 10:35]
    wire funct3 : UInt
    funct3 <= _funct3_T
    node _funct7_T = bits(io.inst, 31, 25) @[ImmGen.scala 11:35]
    wire funct7 : UInt
    funct7 <= _funct7_T
    node _rs2_T = bits(io.inst, 24, 20) @[ImmGen.scala 12:32]
    wire rs2 : UInt
    rs2 <= _rs2_T
    node _io_immed_T = bits(io.inst, 31, 31) @[ImmGen.scala 15:32]
    node _io_immed_T_1 = bits(_io_immed_T, 0, 0) @[Bitwise.scala 72:15]
    node _io_immed_T_2 = mux(_io_immed_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_immed_T_3 = bits(io.inst, 31, 20) @[ImmGen.scala 15:48]
    node _io_immed_T_4 = cat(_io_immed_T_2, _io_immed_T_3) @[ImmGen.scala 15:38]
    io.immed <= _io_immed_T_4 @[ImmGen.scala 15:12]
    node _T = eq(UInt<7>("h063"), op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_immed_T_5 = bits(io.inst, 31, 31) @[ImmGen.scala 19:35]
      node _io_immed_T_6 = bits(_io_immed_T_5, 0, 0) @[Bitwise.scala 72:15]
      node _io_immed_T_7 = mux(_io_immed_T_6, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node _io_immed_T_8 = bits(io.inst, 31, 31) @[ImmGen.scala 19:50]
      node _io_immed_T_9 = cat(_io_immed_T_7, _io_immed_T_8) @[ImmGen.scala 19:41]
      node _io_immed_T_10 = bits(io.inst, 7, 7) @[ImmGen.scala 19:65]
      node _io_immed_T_11 = cat(_io_immed_T_9, _io_immed_T_10) @[ImmGen.scala 19:55]
      node _io_immed_T_12 = bits(io.inst, 30, 25) @[ImmGen.scala 19:79]
      node _io_immed_T_13 = cat(_io_immed_T_11, _io_immed_T_12) @[ImmGen.scala 19:69]
      node _io_immed_T_14 = bits(io.inst, 11, 8) @[ImmGen.scala 19:98]
      node _io_immed_T_15 = cat(_io_immed_T_13, _io_immed_T_14) @[ImmGen.scala 19:88]
      node _io_immed_T_16 = cat(_io_immed_T_15, UInt<1>("h00")) @[ImmGen.scala 19:106]
      io.immed <= _io_immed_T_16 @[ImmGen.scala 19:16]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<6>("h023"), op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_immed_T_17 = bits(io.inst, 31, 31) @[ImmGen.scala 23:35]
        node _io_immed_T_18 = bits(_io_immed_T_17, 0, 0) @[Bitwise.scala 72:15]
        node _io_immed_T_19 = mux(_io_immed_T_18, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node _io_immed_T_20 = bits(io.inst, 31, 25) @[ImmGen.scala 23:51]
        node _io_immed_T_21 = cat(_io_immed_T_19, _io_immed_T_20) @[ImmGen.scala 23:41]
        node _io_immed_T_22 = bits(io.inst, 11, 7) @[ImmGen.scala 23:70]
        node _io_immed_T_23 = cat(_io_immed_T_21, _io_immed_T_22) @[ImmGen.scala 23:60]
        io.immed <= _io_immed_T_23 @[ImmGen.scala 23:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<7>("h06f"), op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _io_immed_T_24 = bits(io.inst, 31, 31) @[ImmGen.scala 27:35]
          node _io_immed_T_25 = bits(_io_immed_T_24, 0, 0) @[Bitwise.scala 72:15]
          node _io_immed_T_26 = mux(_io_immed_T_25, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
          node _io_immed_T_27 = bits(io.inst, 31, 31) @[ImmGen.scala 27:51]
          node _io_immed_T_28 = cat(_io_immed_T_26, _io_immed_T_27) @[ImmGen.scala 27:41]
          node _io_immed_T_29 = bits(io.inst, 19, 12) @[ImmGen.scala 27:66]
          node _io_immed_T_30 = cat(_io_immed_T_28, _io_immed_T_29) @[ImmGen.scala 27:56]
          node _io_immed_T_31 = bits(io.inst, 20, 20) @[ImmGen.scala 27:85]
          node _io_immed_T_32 = cat(_io_immed_T_30, _io_immed_T_31) @[ImmGen.scala 27:75]
          node _io_immed_T_33 = bits(io.inst, 30, 21) @[ImmGen.scala 27:100]
          node _io_immed_T_34 = cat(_io_immed_T_32, _io_immed_T_33) @[ImmGen.scala 27:90]
          node _io_immed_T_35 = cat(_io_immed_T_34, UInt<1>("h00")) @[ImmGen.scala 27:109]
          io.immed <= _io_immed_T_35 @[ImmGen.scala 27:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<6>("h037"), op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_immed_T_36 = bits(io.inst, 31, 12) @[ImmGen.scala 31:27]
            node _io_immed_T_37 = shl(_io_immed_T_36, 12) @[ImmGen.scala 31:36]
            io.immed <= _io_immed_T_37 @[ImmGen.scala 31:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<5>("h017"), op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _io_immed_T_38 = bits(io.inst, 31, 12) @[ImmGen.scala 35:27]
              node _io_immed_T_39 = shl(_io_immed_T_38, 12) @[ImmGen.scala 35:35]
              io.immed <= _io_immed_T_39 @[ImmGen.scala 35:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<5>("h013"), op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _T_6 = cat(funct3, funct7) @[ImmGen.scala 39:19]
                node _T_7 = eq(_T_6, UInt<8>("h080")) @[ImmGen.scala 39:29]
                node _T_8 = cat(funct3, funct7) @[ImmGen.scala 39:59]
                node _T_9 = eq(_T_8, UInt<10>("h0280")) @[ImmGen.scala 39:69]
                node _T_10 = or(_T_7, _T_9) @[ImmGen.scala 39:49]
                node _T_11 = cat(funct3, funct7) @[ImmGen.scala 39:99]
                node _T_12 = eq(_T_11, UInt<10>("h02a0")) @[ImmGen.scala 39:109]
                node _T_13 = or(_T_10, _T_12) @[ImmGen.scala 39:89]
                when _T_13 : @[ImmGen.scala 39:129]
                  node _io_immed_T_40 = bits(rs2, 4, 4) @[ImmGen.scala 40:33]
                  node _io_immed_T_41 = bits(_io_immed_T_40, 0, 0) @[Bitwise.scala 72:15]
                  node _io_immed_T_42 = mux(_io_immed_T_41, UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                  node _io_immed_T_43 = cat(_io_immed_T_42, rs2) @[ImmGen.scala 40:38]
                  io.immed <= _io_immed_T_43 @[ImmGen.scala 40:18]
                  skip @[ImmGen.scala 39:129]
                skip @[Conditional.scala 39:67]
    
  module CPU : 
    input clock : Clock
    input reset : Reset
    output io : {regFile : SInt<32>[32], ecll : UInt<1>, flip dinI : UInt<32>, flip dinD : UInt<32>, doutD : UInt<32>, addrI : UInt<32>, addrD : UInt<32>, we : UInt<32>, bytes : UInt<2>, sign : UInt<1>}
    
    inst regFile of RegisterFile @[CPU.scala 87:23]
    regFile.clock <= clock
    regFile.reset <= reset
    io.regFile[0] <= regFile.io.regFile[0] @[CPU.scala 88:14]
    io.regFile[1] <= regFile.io.regFile[1] @[CPU.scala 88:14]
    io.regFile[2] <= regFile.io.regFile[2] @[CPU.scala 88:14]
    io.regFile[3] <= regFile.io.regFile[3] @[CPU.scala 88:14]
    io.regFile[4] <= regFile.io.regFile[4] @[CPU.scala 88:14]
    io.regFile[5] <= regFile.io.regFile[5] @[CPU.scala 88:14]
    io.regFile[6] <= regFile.io.regFile[6] @[CPU.scala 88:14]
    io.regFile[7] <= regFile.io.regFile[7] @[CPU.scala 88:14]
    io.regFile[8] <= regFile.io.regFile[8] @[CPU.scala 88:14]
    io.regFile[9] <= regFile.io.regFile[9] @[CPU.scala 88:14]
    io.regFile[10] <= regFile.io.regFile[10] @[CPU.scala 88:14]
    io.regFile[11] <= regFile.io.regFile[11] @[CPU.scala 88:14]
    io.regFile[12] <= regFile.io.regFile[12] @[CPU.scala 88:14]
    io.regFile[13] <= regFile.io.regFile[13] @[CPU.scala 88:14]
    io.regFile[14] <= regFile.io.regFile[14] @[CPU.scala 88:14]
    io.regFile[15] <= regFile.io.regFile[15] @[CPU.scala 88:14]
    io.regFile[16] <= regFile.io.regFile[16] @[CPU.scala 88:14]
    io.regFile[17] <= regFile.io.regFile[17] @[CPU.scala 88:14]
    io.regFile[18] <= regFile.io.regFile[18] @[CPU.scala 88:14]
    io.regFile[19] <= regFile.io.regFile[19] @[CPU.scala 88:14]
    io.regFile[20] <= regFile.io.regFile[20] @[CPU.scala 88:14]
    io.regFile[21] <= regFile.io.regFile[21] @[CPU.scala 88:14]
    io.regFile[22] <= regFile.io.regFile[22] @[CPU.scala 88:14]
    io.regFile[23] <= regFile.io.regFile[23] @[CPU.scala 88:14]
    io.regFile[24] <= regFile.io.regFile[24] @[CPU.scala 88:14]
    io.regFile[25] <= regFile.io.regFile[25] @[CPU.scala 88:14]
    io.regFile[26] <= regFile.io.regFile[26] @[CPU.scala 88:14]
    io.regFile[27] <= regFile.io.regFile[27] @[CPU.scala 88:14]
    io.regFile[28] <= regFile.io.regFile[28] @[CPU.scala 88:14]
    io.regFile[29] <= regFile.io.regFile[29] @[CPU.scala 88:14]
    io.regFile[30] <= regFile.io.regFile[30] @[CPU.scala 88:14]
    io.regFile[31] <= regFile.io.regFile[31] @[CPU.scala 88:14]
    inst alu of ALU @[CPU.scala 89:19]
    alu.clock <= clock
    alu.reset <= reset
    inst instDec of InstructionDecoder @[CPU.scala 90:23]
    instDec.clock <= clock
    instDec.reset <= reset
    inst control of Control @[CPU.scala 91:23]
    control.clock <= clock
    control.reset <= reset
    inst forwardingUnit of ForwardingUnit @[CPU.scala 92:30]
    forwardingUnit.clock <= clock
    forwardingUnit.reset <= reset
    inst hazardUnit of HazardUnit @[CPU.scala 93:26]
    hazardUnit.clock <= clock
    hazardUnit.reset <= reset
    inst immGen of ImmGen @[CPU.scala 94:22]
    immGen.clock <= clock
    immGen.reset <= reset
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CPU.scala 95:19]
    wire _IFID_WIRE : {inst : UInt<32>, pc : UInt<32>} @[CPU.scala 97:34]
    _IFID_WIRE.pc <= UInt<32>("h00") @[CPU.scala 97:34]
    _IFID_WIRE.inst <= UInt<32>("h00") @[CPU.scala 97:34]
    reg IFID : {inst : UInt<32>, pc : UInt<32>}, clock with : (reset => (reset, _IFID_WIRE)) @[CPU.scala 97:21]
    wire _IDEX_WIRE : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, aluop : UInt<3>, a : SInt<32>, b : SInt<32>, pc : UInt<32>, inst : UInt<32>, sely : UInt<2>, sela : UInt<1>, selb : UInt<2>, branch : UInt<3>, jump : UInt<2>, regWE : UInt<1>, memWE : UInt<1>, memRE : UInt<1>, bytes : UInt<2>, sign : UInt<1>, ecll : UInt<1>} @[CPU.scala 98:34]
    _IDEX_WIRE.ecll <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.sign <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.bytes <= UInt<2>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.memRE <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.memWE <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.regWE <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.jump <= UInt<2>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.branch <= UInt<3>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.selb <= UInt<2>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.sela <= UInt<1>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.sely <= UInt<2>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.inst <= UInt<32>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.pc <= UInt<32>("h00") @[CPU.scala 98:34]
    node _IDEX_T = asSInt(UInt<32>("h00")) @[CPU.scala 98:34]
    _IDEX_WIRE.b <= _IDEX_T @[CPU.scala 98:34]
    node _IDEX_T_1 = asSInt(UInt<32>("h00")) @[CPU.scala 98:34]
    _IDEX_WIRE.a <= _IDEX_T_1 @[CPU.scala 98:34]
    _IDEX_WIRE.aluop <= UInt<3>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.rs2 <= UInt<5>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.rs1 <= UInt<5>("h00") @[CPU.scala 98:34]
    _IDEX_WIRE.rd <= UInt<5>("h00") @[CPU.scala 98:34]
    reg IDEX : {rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, aluop : UInt<3>, a : SInt<32>, b : SInt<32>, pc : UInt<32>, inst : UInt<32>, sely : UInt<2>, sela : UInt<1>, selb : UInt<2>, branch : UInt<3>, jump : UInt<2>, regWE : UInt<1>, memWE : UInt<1>, memRE : UInt<1>, bytes : UInt<2>, sign : UInt<1>, ecll : UInt<1>}, clock with : (reset => (reset, _IDEX_WIRE)) @[CPU.scala 98:21]
    wire _EXMEM_WIRE : {rd : UInt<5>, regWE : UInt<1>, memWE : UInt<1>, memRE : UInt<1>, y : SInt<32>, b : SInt<32>, bytes : UInt<2>, sign : UInt<1>, ecll : UInt<1>} @[CPU.scala 99:35]
    _EXMEM_WIRE.ecll <= UInt<1>("h00") @[CPU.scala 99:35]
    _EXMEM_WIRE.sign <= UInt<1>("h00") @[CPU.scala 99:35]
    _EXMEM_WIRE.bytes <= UInt<2>("h00") @[CPU.scala 99:35]
    node _EXMEM_T = asSInt(UInt<32>("h00")) @[CPU.scala 99:35]
    _EXMEM_WIRE.b <= _EXMEM_T @[CPU.scala 99:35]
    node _EXMEM_T_1 = asSInt(UInt<32>("h00")) @[CPU.scala 99:35]
    _EXMEM_WIRE.y <= _EXMEM_T_1 @[CPU.scala 99:35]
    _EXMEM_WIRE.memRE <= UInt<1>("h00") @[CPU.scala 99:35]
    _EXMEM_WIRE.memWE <= UInt<1>("h00") @[CPU.scala 99:35]
    _EXMEM_WIRE.regWE <= UInt<1>("h00") @[CPU.scala 99:35]
    _EXMEM_WIRE.rd <= UInt<5>("h00") @[CPU.scala 99:35]
    reg EXMEM : {rd : UInt<5>, regWE : UInt<1>, memWE : UInt<1>, memRE : UInt<1>, y : SInt<32>, b : SInt<32>, bytes : UInt<2>, sign : UInt<1>, ecll : UInt<1>}, clock with : (reset => (reset, _EXMEM_WIRE)) @[CPU.scala 99:22]
    wire _MEMWB_WIRE : {rd : UInt<5>, regWE : UInt<1>, data : SInt<32>, ecll : UInt<1>} @[CPU.scala 100:35]
    _MEMWB_WIRE.ecll <= UInt<1>("h00") @[CPU.scala 100:35]
    node _MEMWB_T = asSInt(UInt<32>("h00")) @[CPU.scala 100:35]
    _MEMWB_WIRE.data <= _MEMWB_T @[CPU.scala 100:35]
    _MEMWB_WIRE.regWE <= UInt<1>("h00") @[CPU.scala 100:35]
    _MEMWB_WIRE.rd <= UInt<5>("h00") @[CPU.scala 100:35]
    reg MEMWB : {rd : UInt<5>, regWE : UInt<1>, data : SInt<32>, ecll : UInt<1>}, clock with : (reset => (reset, _MEMWB_WIRE)) @[CPU.scala 100:22]
    wire flush : UInt<1>
    flush <= UInt<1>("h00")
    wire a : SInt
    a <= IDEX.a
    wire b : SInt
    b <= IDEX.b
    hazardUnit.io.idex.rd <= IDEX.rd @[CPU.scala 107:25]
    hazardUnit.io.idex.memRE <= IDEX.memRE @[CPU.scala 108:28]
    hazardUnit.io.ifid.rs1 <= instDec.io.rs1 @[CPU.scala 109:26]
    hazardUnit.io.ifid.rs2 <= instDec.io.rs2 @[CPU.scala 110:26]
    forwardingUnit.io.idex.rs1 <= IDEX.rs1 @[CPU.scala 114:30]
    forwardingUnit.io.idex.rs2 <= IDEX.rs2 @[CPU.scala 115:30]
    forwardingUnit.io.exmem.rd <= EXMEM.rd @[CPU.scala 116:30]
    forwardingUnit.io.exmem.regWE <= EXMEM.regWE @[CPU.scala 117:33]
    forwardingUnit.io.memwb.rd <= MEMWB.rd @[CPU.scala 118:30]
    forwardingUnit.io.memwb.regWE <= MEMWB.regWE @[CPU.scala 119:33]
    forwardingUnit.io.ifid.rs1 <= instDec.io.rs1 @[CPU.scala 120:30]
    forwardingUnit.io.ifid.rs2 <= instDec.io.rs2 @[CPU.scala 121:30]
    node _io_addrI_T = bits(pc, 31, 2) @[CPU.scala 125:17]
    io.addrI <= _io_addrI_T @[CPU.scala 125:12]
    node _T = eq(hazardUnit.io.stall, UInt<1>("h00")) @[CPU.scala 126:8]
    when _T : @[CPU.scala 126:29]
      node _pc_T = add(pc, UInt<3>("h04")) @[CPU.scala 127:14]
      node _pc_T_1 = tail(_pc_T, 1) @[CPU.scala 127:14]
      pc <= _pc_T_1 @[CPU.scala 127:8]
      node _T_1 = eq(IDEX.branch, UInt<1>("h01")) @[CPU.scala 129:23]
      node _T_2 = and(_T_1, alu.io.eq) @[CPU.scala 129:31]
      node _T_3 = eq(IDEX.branch, UInt<2>("h02")) @[CPU.scala 129:61]
      node _T_4 = eq(alu.io.eq, UInt<1>("h00")) @[CPU.scala 129:72]
      node _T_5 = and(_T_3, _T_4) @[CPU.scala 129:69]
      node _T_6 = or(_T_2, _T_5) @[CPU.scala 129:45]
      node _T_7 = eq(IDEX.branch, UInt<2>("h03")) @[CPU.scala 130:23]
      node _T_8 = and(_T_7, alu.io.lt) @[CPU.scala 130:31]
      node _T_9 = or(_T_6, _T_8) @[CPU.scala 129:84]
      node _T_10 = eq(IDEX.branch, UInt<3>("h04")) @[CPU.scala 130:61]
      node _T_11 = eq(alu.io.lt, UInt<1>("h00")) @[CPU.scala 130:86]
      node _T_12 = or(alu.io.eq, _T_11) @[CPU.scala 130:83]
      node _T_13 = and(_T_10, _T_12) @[CPU.scala 130:69]
      node _T_14 = or(_T_9, _T_13) @[CPU.scala 130:45]
      node _T_15 = eq(IDEX.branch, UInt<3>("h05")) @[CPU.scala 131:23]
      node _T_16 = and(_T_15, alu.io.ltu) @[CPU.scala 131:31]
      node _T_17 = or(_T_14, _T_16) @[CPU.scala 130:99]
      node _T_18 = eq(IDEX.branch, UInt<3>("h06")) @[CPU.scala 131:62]
      node _T_19 = eq(alu.io.ltu, UInt<1>("h00")) @[CPU.scala 131:87]
      node _T_20 = or(alu.io.eq, _T_19) @[CPU.scala 131:84]
      node _T_21 = and(_T_18, _T_20) @[CPU.scala 131:70]
      node _T_22 = or(_T_17, _T_21) @[CPU.scala 131:46]
      node _T_23 = bits(IDEX.jump, 0, 0) @[CPU.scala 131:113]
      node _T_24 = or(_T_22, _T_23) @[CPU.scala 131:101]
      when _T_24 : @[CPU.scala 131:117]
        node _pc_T_2 = add(IDEX.pc, immGen.io.immed) @[CPU.scala 132:21]
        node _pc_T_3 = tail(_pc_T_2, 1) @[CPU.scala 132:21]
        pc <= _pc_T_3 @[CPU.scala 132:10]
        flush <= UInt<1>("h01") @[CPU.scala 133:13]
        skip @[CPU.scala 131:117]
      node _T_25 = bits(IDEX.jump, 1, 1) @[CPU.scala 136:19]
      when _T_25 : @[CPU.scala 136:23]
        node _pc_T_4 = asUInt(a) @[CPU.scala 137:21]
        node _pc_T_5 = add(_pc_T_4, immGen.io.immed) @[CPU.scala 137:24]
        node _pc_T_6 = tail(_pc_T_5, 1) @[CPU.scala 137:24]
        pc <= _pc_T_6 @[CPU.scala 137:10]
        flush <= UInt<1>("h01") @[CPU.scala 138:13]
        skip @[CPU.scala 136:23]
      skip @[CPU.scala 126:29]
    instDec.io.inst <= IFID.inst @[CPU.scala 144:19]
    control.io.op <= instDec.io.ctrlop @[CPU.scala 145:17]
    control.io.im <= instDec.io.im @[CPU.scala 146:17]
    regFile.io.rs1 <= instDec.io.rs1 @[CPU.scala 147:18]
    regFile.io.rs2 <= instDec.io.rs2 @[CPU.scala 148:18]
    node _T_26 = eq(hazardUnit.io.stall, UInt<1>("h00")) @[CPU.scala 149:8]
    when _T_26 : @[CPU.scala 149:29]
      IFID.inst <= io.dinI @[CPU.scala 150:15]
      IFID.pc <= pc @[CPU.scala 151:13]
      skip @[CPU.scala 149:29]
    when flush : @[CPU.scala 153:14]
      IFID.inst <= UInt<1>("h00") @[CPU.scala 10:10]
      IFID.pc <= UInt<1>("h00") @[CPU.scala 11:8]
      skip @[CPU.scala 153:14]
    IDEX.rd <= instDec.io.rd @[CPU.scala 158:11]
    IDEX.rs1 <= instDec.io.rs1 @[CPU.scala 159:12]
    IDEX.rs2 <= instDec.io.rs2 @[CPU.scala 160:12]
    IDEX.aluop <= control.io.aluop @[CPU.scala 161:14]
    IDEX.a <= regFile.io.reg1 @[CPU.scala 162:10]
    when forwardingUnit.io.forwardIDA : @[CPU.scala 163:37]
      IDEX.a <= MEMWB.data @[CPU.scala 164:12]
      skip @[CPU.scala 163:37]
    IDEX.b <= regFile.io.reg2 @[CPU.scala 166:10]
    when forwardingUnit.io.forwardIDB : @[CPU.scala 167:37]
      IDEX.b <= MEMWB.data @[CPU.scala 168:12]
      skip @[CPU.scala 167:37]
    IDEX.pc <= IFID.pc @[CPU.scala 170:11]
    IDEX.inst <= IFID.inst @[CPU.scala 171:13]
    IDEX.sely <= control.io.sely @[CPU.scala 172:13]
    IDEX.sela <= control.io.sela @[CPU.scala 173:13]
    IDEX.selb <= control.io.selb @[CPU.scala 174:13]
    IDEX.branch <= control.io.branch @[CPU.scala 175:15]
    IDEX.jump <= control.io.jump @[CPU.scala 176:13]
    IDEX.regWE <= control.io.regWE @[CPU.scala 177:14]
    IDEX.memWE <= control.io.memWE @[CPU.scala 178:14]
    IDEX.memRE <= control.io.memRE @[CPU.scala 179:14]
    IDEX.bytes <= control.io.bytes @[CPU.scala 180:14]
    IDEX.sign <= control.io.sign @[CPU.scala 181:13]
    IDEX.ecll <= control.io.ecll @[CPU.scala 182:13]
    immGen.io.inst <= IDEX.inst @[CPU.scala 183:18]
    node _T_27 = or(hazardUnit.io.stall, flush) @[CPU.scala 184:28]
    when _T_27 : @[CPU.scala 184:37]
      IDEX.rd <= UInt<1>("h00") @[CPU.scala 35:8]
      IDEX.rs1 <= UInt<1>("h00") @[CPU.scala 36:9]
      IDEX.rs2 <= UInt<1>("h00") @[CPU.scala 37:9]
      IDEX.aluop <= UInt<1>("h00") @[CPU.scala 38:11]
      IDEX.a <= asSInt(UInt<1>("h00")) @[CPU.scala 39:7]
      IDEX.b <= asSInt(UInt<1>("h00")) @[CPU.scala 40:7]
      IDEX.pc <= UInt<1>("h00") @[CPU.scala 41:8]
      IDEX.inst <= UInt<1>("h00") @[CPU.scala 42:10]
      IDEX.sely <= UInt<1>("h00") @[CPU.scala 43:10]
      IDEX.sela <= UInt<1>("h00") @[CPU.scala 44:10]
      IDEX.selb <= UInt<1>("h00") @[CPU.scala 45:10]
      IDEX.branch <= UInt<1>("h00") @[CPU.scala 46:12]
      IDEX.jump <= UInt<1>("h00") @[CPU.scala 47:10]
      IDEX.regWE <= UInt<1>("h00") @[CPU.scala 48:11]
      IDEX.memWE <= UInt<1>("h00") @[CPU.scala 49:11]
      IDEX.memRE <= UInt<1>("h00") @[CPU.scala 50:11]
      IDEX.bytes <= UInt<1>("h00") @[CPU.scala 51:11]
      IDEX.sign <= UInt<1>("h00") @[CPU.scala 52:10]
      IDEX.ecll <= UInt<1>("h00") @[CPU.scala 53:10]
      skip @[CPU.scala 184:37]
    alu.io.op <= IDEX.aluop @[CPU.scala 189:13]
    alu.io.a <= a @[CPU.scala 190:12]
    when IDEX.sela : @[CPU.scala 191:18]
      node _alu_io_a_T = asSInt(IDEX.pc) @[CPU.scala 192:31]
      alu.io.a <= _alu_io_a_T @[CPU.scala 192:14]
      skip @[CPU.scala 191:18]
    node _T_28 = eq(UInt<1>("h01"), forwardingUnit.io.forwardEXA) @[Conditional.scala 37:30]
    when _T_28 : @[Conditional.scala 40:58]
      a <= MEMWB.data @[CPU.scala 195:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_29 = eq(UInt<2>("h02"), forwardingUnit.io.forwardEXA) @[Conditional.scala 37:30]
      when _T_29 : @[Conditional.scala 39:67]
        a <= EXMEM.y @[CPU.scala 196:15]
        skip @[Conditional.scala 39:67]
    alu.io.b <= b @[CPU.scala 199:12]
    node _T_30 = eq(IDEX.selb, UInt<1>("h01")) @[CPU.scala 200:18]
    when _T_30 : @[CPU.scala 200:26]
      alu.io.b <= asSInt(UInt<4>("h04")) @[CPU.scala 201:14]
      skip @[CPU.scala 200:26]
    else : @[CPU.scala 202:34]
      node _T_31 = eq(IDEX.selb, UInt<2>("h02")) @[CPU.scala 202:26]
      when _T_31 : @[CPU.scala 202:34]
        node _alu_io_b_T = asSInt(immGen.io.immed) @[CPU.scala 203:39]
        alu.io.b <= _alu_io_b_T @[CPU.scala 203:14]
        skip @[CPU.scala 202:34]
    node _T_32 = eq(forwardingUnit.io.forwardEXB, UInt<1>("h01")) @[CPU.scala 205:37]
    when _T_32 : @[CPU.scala 205:45]
      b <= MEMWB.data @[CPU.scala 206:7]
      skip @[CPU.scala 205:45]
    else : @[CPU.scala 207:53]
      node _T_33 = eq(forwardingUnit.io.forwardEXB, UInt<2>("h02")) @[CPU.scala 207:45]
      when _T_33 : @[CPU.scala 207:53]
        b <= EXMEM.y @[CPU.scala 208:7]
        skip @[CPU.scala 207:53]
    EXMEM.y <= alu.io.y @[CPU.scala 212:11]
    node _T_34 = eq(UInt<1>("h01"), IDEX.sely) @[Conditional.scala 37:30]
    when _T_34 : @[Conditional.scala 40:58]
      node _EXMEM_y_T = cat(UInt<1>("h00"), alu.io.lt) @[CPU.scala 214:30]
      node _EXMEM_y_T_1 = asSInt(_EXMEM_y_T) @[CPU.scala 214:50]
      EXMEM.y <= _EXMEM_y_T_1 @[CPU.scala 214:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_35 = eq(UInt<2>("h02"), IDEX.sely) @[Conditional.scala 37:30]
      when _T_35 : @[Conditional.scala 39:67]
        node _EXMEM_y_T_2 = cat(UInt<1>("h00"), alu.io.ltu) @[CPU.scala 215:30]
        node _EXMEM_y_T_3 = asSInt(_EXMEM_y_T_2) @[CPU.scala 215:51]
        EXMEM.y <= _EXMEM_y_T_3 @[CPU.scala 215:22]
        skip @[Conditional.scala 39:67]
    EXMEM.rd <= IDEX.rd @[CPU.scala 220:12]
    EXMEM.regWE <= IDEX.regWE @[CPU.scala 221:15]
    EXMEM.memWE <= IDEX.memWE @[CPU.scala 222:15]
    EXMEM.memRE <= IDEX.memRE @[CPU.scala 223:15]
    EXMEM.b <= b @[CPU.scala 224:11]
    EXMEM.bytes <= IDEX.bytes @[CPU.scala 225:15]
    EXMEM.sign <= IDEX.sign @[CPU.scala 226:14]
    EXMEM.ecll <= IDEX.ecll @[CPU.scala 227:14]
    node _io_doutD_T = asUInt(EXMEM.b) @[CPU.scala 228:29]
    io.doutD <= _io_doutD_T @[CPU.scala 228:12]
    io.we <= EXMEM.memWE @[CPU.scala 229:9]
    node _io_addrD_T = asUInt(EXMEM.y) @[CPU.scala 230:29]
    io.addrD <= _io_addrD_T @[CPU.scala 230:12]
    io.sign <= EXMEM.sign @[CPU.scala 231:11]
    io.bytes <= EXMEM.bytes @[CPU.scala 232:12]
    MEMWB.rd <= EXMEM.rd @[CPU.scala 236:12]
    MEMWB.regWE <= EXMEM.regWE @[CPU.scala 237:15]
    MEMWB.data <= EXMEM.y @[CPU.scala 238:14]
    MEMWB.ecll <= EXMEM.ecll @[CPU.scala 239:14]
    when EXMEM.memRE : @[CPU.scala 240:20]
      node _MEMWB_data_T = asSInt(io.dinD) @[CPU.scala 241:33]
      MEMWB.data <= _MEMWB_data_T @[CPU.scala 241:16]
      skip @[CPU.scala 240:20]
    regFile.io.we <= MEMWB.regWE @[CPU.scala 243:17]
    regFile.io.rd <= MEMWB.rd @[CPU.scala 244:17]
    regFile.io.din <= MEMWB.data @[CPU.scala 245:18]
    io.ecll <= MEMWB.ecll @[CPU.scala 248:11]
    
  module RAM : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip addr : UInt<20>, flip din : UInt<32>, dout : UInt<32>, flip bytes : UInt<2>, flip sign : UInt<1>}
    
    cmem bankA : UInt<8>[262144] @[RAM.scala 14:18]
    cmem bankB : UInt<8>[262144] @[RAM.scala 15:18]
    cmem bankC : UInt<8>[262144] @[RAM.scala 16:18]
    cmem bankD : UInt<8>[262144] @[RAM.scala 17:18]
    node _rowUpper_T = bits(io.addr, 19, 2) @[RAM.scala 18:25]
    node _rowUpper_T_1 = add(_rowUpper_T, UInt<1>("h01")) @[RAM.scala 18:32]
    node rowUpper = tail(_rowUpper_T_1, 1) @[RAM.scala 18:32]
    node rowLower = bits(io.addr, 19, 2) @[RAM.scala 19:25]
    wire _dout_WIRE : UInt<8>[4] @[RAM.scala 20:33]
    _dout_WIRE[0] <= UInt<8>("h00") @[RAM.scala 20:33]
    _dout_WIRE[1] <= UInt<8>("h00") @[RAM.scala 20:33]
    _dout_WIRE[2] <= UInt<8>("h00") @[RAM.scala 20:33]
    _dout_WIRE[3] <= UInt<8>("h00") @[RAM.scala 20:33]
    wire dout : UInt<8>[4]
    dout[0] <= _dout_WIRE[0]
    dout[1] <= _dout_WIRE[1]
    dout[2] <= _dout_WIRE[2]
    dout[3] <= _dout_WIRE[3]
    wire rowA : UInt
    rowA <= rowLower
    wire rowB : UInt
    rowB <= rowLower
    wire rowC : UInt
    rowC <= rowLower
    wire rowD : UInt
    rowD <= rowLower
    node _T = bits(io.addr, 1, 1) @[RAM.scala 27:15]
    node _T_1 = bits(io.addr, 0, 0) @[RAM.scala 27:29]
    node _T_2 = or(_T, _T_1) @[RAM.scala 27:19]
    when _T_2 : @[RAM.scala 27:33]
      rowA <= rowUpper @[RAM.scala 27:40]
      skip @[RAM.scala 27:33]
    node _T_3 = bits(io.addr, 1, 1) @[RAM.scala 28:15]
    when _T_3 : @[RAM.scala 28:19]
      rowB <= rowUpper @[RAM.scala 28:26]
      skip @[RAM.scala 28:19]
    node _T_4 = bits(io.addr, 1, 1) @[RAM.scala 29:15]
    node _T_5 = bits(io.addr, 0, 0) @[RAM.scala 29:29]
    node _T_6 = and(_T_4, _T_5) @[RAM.scala 29:19]
    when _T_6 : @[RAM.scala 29:33]
      rowC <= rowUpper @[RAM.scala 29:40]
      skip @[RAM.scala 29:33]
    node _T_7 = bits(io.addr, 1, 0) @[RAM.scala 31:17]
    node _T_8 = eq(UInt<1>("h00"), _T_7) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      when io.we : @[RAM.scala 33:18]
        node _T_9 = bits(io.din, 7, 0) @[RAM.scala 34:33]
        node _T_10 = or(rowA, UInt<18>("h00"))
        node _T_11 = bits(_T_10, 17, 0)
        write mport MPORT = bankA[_T_11], clock
        MPORT <= _T_9
        node _T_12 = bits(io.bytes, 1, 1) @[RAM.scala 35:22]
        when _T_12 : @[RAM.scala 35:26]
          node _T_13 = bits(io.din, 15, 8) @[RAM.scala 36:35]
          node _T_14 = or(rowB, UInt<18>("h00"))
          node _T_15 = bits(_T_14, 17, 0)
          write mport MPORT_1 = bankB[_T_15], clock
          MPORT_1 <= _T_13
          node _T_16 = bits(io.bytes, 0, 0) @[RAM.scala 37:24]
          when _T_16 : @[RAM.scala 37:28]
            node _T_17 = bits(io.din, 23, 16) @[RAM.scala 38:37]
            node _T_18 = or(rowC, UInt<18>("h00"))
            node _T_19 = bits(_T_18, 17, 0)
            write mport MPORT_2 = bankC[_T_19], clock
            MPORT_2 <= _T_17
            node _T_20 = bits(io.din, 31, 24) @[RAM.scala 39:37]
            node _T_21 = or(rowD, UInt<18>("h00"))
            node _T_22 = bits(_T_21, 17, 0)
            write mport MPORT_3 = bankD[_T_22], clock
            MPORT_3 <= _T_20
            skip @[RAM.scala 37:28]
          skip @[RAM.scala 35:26]
        skip @[RAM.scala 33:18]
      else : @[RAM.scala 42:21]
        node _dout_0_T = or(rowA, UInt<18>("h00")) @[RAM.scala 43:30]
        node _dout_0_T_1 = bits(_dout_0_T, 17, 0) @[RAM.scala 43:30]
        read mport dout_0_MPORT = bankA[_dout_0_T_1], clock @[RAM.scala 43:30]
        dout[0] <= dout_0_MPORT @[RAM.scala 43:17]
        node _T_23 = bits(io.bytes, 1, 1) @[RAM.scala 44:22]
        when _T_23 : @[RAM.scala 44:26]
          node _dout_1_T = or(rowB, UInt<18>("h00")) @[RAM.scala 45:32]
          node _dout_1_T_1 = bits(_dout_1_T, 17, 0) @[RAM.scala 45:32]
          read mport dout_1_MPORT = bankB[_dout_1_T_1], clock @[RAM.scala 45:32]
          dout[1] <= dout_1_MPORT @[RAM.scala 45:19]
          node _T_24 = bits(io.bytes, 0, 0) @[RAM.scala 46:24]
          when _T_24 : @[RAM.scala 46:28]
            node _dout_2_T = or(rowC, UInt<18>("h00")) @[RAM.scala 47:34]
            node _dout_2_T_1 = bits(_dout_2_T, 17, 0) @[RAM.scala 47:34]
            read mport dout_2_MPORT = bankC[_dout_2_T_1], clock @[RAM.scala 47:34]
            dout[2] <= dout_2_MPORT @[RAM.scala 47:21]
            node _dout_3_T = or(rowD, UInt<18>("h00")) @[RAM.scala 48:34]
            node _dout_3_T_1 = bits(_dout_3_T, 17, 0) @[RAM.scala 48:34]
            read mport dout_3_MPORT = bankD[_dout_3_T_1], clock @[RAM.scala 48:34]
            dout[3] <= dout_3_MPORT @[RAM.scala 48:21]
            skip @[RAM.scala 46:28]
          else : @[RAM.scala 49:32]
            when io.sign : @[RAM.scala 49:32]
              node _dout_2_T_2 = bits(dout[1], 7, 7) @[RAM.scala 50:39]
              node _dout_2_T_3 = bits(_dout_2_T_2, 0, 0) @[Bitwise.scala 72:15]
              node _dout_2_T_4 = mux(_dout_2_T_3, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
              dout[2] <= _dout_2_T_4 @[RAM.scala 50:21]
              node _dout_3_T_2 = bits(dout[1], 7, 7) @[RAM.scala 51:39]
              node _dout_3_T_3 = bits(_dout_3_T_2, 0, 0) @[Bitwise.scala 72:15]
              node _dout_3_T_4 = mux(_dout_3_T_3, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
              dout[3] <= _dout_3_T_4 @[RAM.scala 51:21]
              skip @[RAM.scala 49:32]
          skip @[RAM.scala 44:26]
        else : @[RAM.scala 53:30]
          when io.sign : @[RAM.scala 53:30]
            node _dout_1_T_2 = bits(dout[0], 7, 7) @[RAM.scala 54:37]
            node _dout_1_T_3 = bits(_dout_1_T_2, 0, 0) @[Bitwise.scala 72:15]
            node _dout_1_T_4 = mux(_dout_1_T_3, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
            dout[1] <= _dout_1_T_4 @[RAM.scala 54:19]
            node _dout_2_T_5 = bits(dout[0], 7, 7) @[RAM.scala 55:37]
            node _dout_2_T_6 = bits(_dout_2_T_5, 0, 0) @[Bitwise.scala 72:15]
            node _dout_2_T_7 = mux(_dout_2_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
            dout[2] <= _dout_2_T_7 @[RAM.scala 55:19]
            node _dout_3_T_5 = bits(dout[0], 7, 7) @[RAM.scala 56:37]
            node _dout_3_T_6 = bits(_dout_3_T_5, 0, 0) @[Bitwise.scala 72:15]
            node _dout_3_T_7 = mux(_dout_3_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
            dout[3] <= _dout_3_T_7 @[RAM.scala 56:19]
            skip @[RAM.scala 53:30]
        skip @[RAM.scala 42:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_25 = eq(UInt<1>("h01"), _T_7) @[Conditional.scala 37:30]
      when _T_25 : @[Conditional.scala 39:67]
        when io.we : @[RAM.scala 61:18]
          node _T_26 = bits(io.din, 7, 0) @[RAM.scala 62:33]
          node _T_27 = or(rowB, UInt<18>("h00"))
          node _T_28 = bits(_T_27, 17, 0)
          write mport MPORT_4 = bankB[_T_28], clock
          MPORT_4 <= _T_26
          node _T_29 = bits(io.bytes, 1, 1) @[RAM.scala 63:22]
          when _T_29 : @[RAM.scala 63:26]
            node _T_30 = bits(io.din, 15, 8) @[RAM.scala 64:35]
            node _T_31 = or(rowC, UInt<18>("h00"))
            node _T_32 = bits(_T_31, 17, 0)
            write mport MPORT_5 = bankC[_T_32], clock
            MPORT_5 <= _T_30
            node _T_33 = bits(io.bytes, 0, 0) @[RAM.scala 65:24]
            when _T_33 : @[RAM.scala 65:28]
              node _T_34 = bits(io.din, 23, 16) @[RAM.scala 66:37]
              node _T_35 = or(rowD, UInt<18>("h00"))
              node _T_36 = bits(_T_35, 17, 0)
              write mport MPORT_6 = bankD[_T_36], clock
              MPORT_6 <= _T_34
              node _T_37 = bits(io.din, 31, 24) @[RAM.scala 67:37]
              node _T_38 = or(rowA, UInt<18>("h00"))
              node _T_39 = bits(_T_38, 17, 0)
              write mport MPORT_7 = bankA[_T_39], clock
              MPORT_7 <= _T_37
              skip @[RAM.scala 65:28]
            skip @[RAM.scala 63:26]
          skip @[RAM.scala 61:18]
        else : @[RAM.scala 70:21]
          node _dout_0_T_2 = or(rowB, UInt<18>("h00")) @[RAM.scala 71:30]
          node _dout_0_T_3 = bits(_dout_0_T_2, 17, 0) @[RAM.scala 71:30]
          read mport dout_0_MPORT_1 = bankB[_dout_0_T_3], clock @[RAM.scala 71:30]
          dout[0] <= dout_0_MPORT_1 @[RAM.scala 71:17]
          node _T_40 = bits(io.bytes, 1, 1) @[RAM.scala 72:22]
          when _T_40 : @[RAM.scala 72:27]
            node _dout_1_T_5 = or(rowC, UInt<18>("h00")) @[RAM.scala 73:32]
            node _dout_1_T_6 = bits(_dout_1_T_5, 17, 0) @[RAM.scala 73:32]
            read mport dout_1_MPORT_1 = bankC[_dout_1_T_6], clock @[RAM.scala 73:32]
            dout[1] <= dout_1_MPORT_1 @[RAM.scala 73:19]
            node _T_41 = bits(io.bytes, 0, 0) @[RAM.scala 74:24]
            when _T_41 : @[RAM.scala 74:28]
              node _dout_2_T_8 = or(rowD, UInt<18>("h00")) @[RAM.scala 75:34]
              node _dout_2_T_9 = bits(_dout_2_T_8, 17, 0) @[RAM.scala 75:34]
              read mport dout_2_MPORT_1 = bankD[_dout_2_T_9], clock @[RAM.scala 75:34]
              dout[2] <= dout_2_MPORT_1 @[RAM.scala 75:21]
              node _dout_3_T_8 = or(rowA, UInt<18>("h00")) @[RAM.scala 76:34]
              node _dout_3_T_9 = bits(_dout_3_T_8, 17, 0) @[RAM.scala 76:34]
              read mport dout_3_MPORT_1 = bankA[_dout_3_T_9], clock @[RAM.scala 76:34]
              dout[3] <= dout_3_MPORT_1 @[RAM.scala 76:21]
              skip @[RAM.scala 74:28]
            else : @[RAM.scala 77:32]
              when io.sign : @[RAM.scala 77:32]
                node _dout_2_T_10 = bits(dout[1], 7, 7) @[RAM.scala 78:39]
                node _dout_2_T_11 = bits(_dout_2_T_10, 0, 0) @[Bitwise.scala 72:15]
                node _dout_2_T_12 = mux(_dout_2_T_11, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                dout[2] <= _dout_2_T_12 @[RAM.scala 78:21]
                node _dout_3_T_10 = bits(dout[1], 7, 7) @[RAM.scala 79:39]
                node _dout_3_T_11 = bits(_dout_3_T_10, 0, 0) @[Bitwise.scala 72:15]
                node _dout_3_T_12 = mux(_dout_3_T_11, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                dout[3] <= _dout_3_T_12 @[RAM.scala 79:21]
                skip @[RAM.scala 77:32]
            skip @[RAM.scala 72:27]
          else : @[RAM.scala 81:29]
            when io.sign : @[RAM.scala 81:29]
              node _dout_1_T_7 = bits(dout[0], 7, 7) @[RAM.scala 82:37]
              node _dout_1_T_8 = bits(_dout_1_T_7, 0, 0) @[Bitwise.scala 72:15]
              node _dout_1_T_9 = mux(_dout_1_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
              dout[1] <= _dout_1_T_9 @[RAM.scala 82:19]
              node _dout_2_T_13 = bits(dout[0], 7, 7) @[RAM.scala 83:37]
              node _dout_2_T_14 = bits(_dout_2_T_13, 0, 0) @[Bitwise.scala 72:15]
              node _dout_2_T_15 = mux(_dout_2_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
              dout[2] <= _dout_2_T_15 @[RAM.scala 83:19]
              node _dout_3_T_13 = bits(dout[0], 7, 7) @[RAM.scala 84:37]
              node _dout_3_T_14 = bits(_dout_3_T_13, 0, 0) @[Bitwise.scala 72:15]
              node _dout_3_T_15 = mux(_dout_3_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
              dout[3] <= _dout_3_T_15 @[RAM.scala 84:19]
              skip @[RAM.scala 81:29]
          skip @[RAM.scala 70:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_42 = eq(UInt<2>("h02"), _T_7) @[Conditional.scala 37:30]
        when _T_42 : @[Conditional.scala 39:67]
          when io.we : @[RAM.scala 89:18]
            node _T_43 = bits(io.din, 7, 0) @[RAM.scala 90:33]
            node _T_44 = or(rowC, UInt<18>("h00"))
            node _T_45 = bits(_T_44, 17, 0)
            write mport MPORT_8 = bankC[_T_45], clock
            MPORT_8 <= _T_43
            node _T_46 = bits(io.bytes, 1, 1) @[RAM.scala 91:22]
            when _T_46 : @[RAM.scala 91:26]
              node _T_47 = bits(io.din, 15, 8) @[RAM.scala 92:35]
              node _T_48 = or(rowD, UInt<18>("h00"))
              node _T_49 = bits(_T_48, 17, 0)
              write mport MPORT_9 = bankD[_T_49], clock
              MPORT_9 <= _T_47
              node _T_50 = bits(io.bytes, 0, 0) @[RAM.scala 93:24]
              when _T_50 : @[RAM.scala 93:28]
                node _T_51 = bits(io.din, 23, 16) @[RAM.scala 94:37]
                node _T_52 = or(rowA, UInt<18>("h00"))
                node _T_53 = bits(_T_52, 17, 0)
                write mport MPORT_10 = bankA[_T_53], clock
                MPORT_10 <= _T_51
                node _T_54 = bits(io.din, 31, 24) @[RAM.scala 95:37]
                node _T_55 = or(rowB, UInt<18>("h00"))
                node _T_56 = bits(_T_55, 17, 0)
                write mport MPORT_11 = bankB[_T_56], clock
                MPORT_11 <= _T_54
                skip @[RAM.scala 93:28]
              skip @[RAM.scala 91:26]
            skip @[RAM.scala 89:18]
          else : @[RAM.scala 98:20]
            node _dout_0_T_4 = or(rowC, UInt<18>("h00")) @[RAM.scala 99:30]
            node _dout_0_T_5 = bits(_dout_0_T_4, 17, 0) @[RAM.scala 99:30]
            read mport dout_0_MPORT_2 = bankC[_dout_0_T_5], clock @[RAM.scala 99:30]
            dout[0] <= dout_0_MPORT_2 @[RAM.scala 99:17]
            node _T_57 = bits(io.bytes, 1, 1) @[RAM.scala 100:22]
            when _T_57 : @[RAM.scala 100:27]
              node _dout_1_T_10 = or(rowD, UInt<18>("h00")) @[RAM.scala 101:32]
              node _dout_1_T_11 = bits(_dout_1_T_10, 17, 0) @[RAM.scala 101:32]
              read mport dout_1_MPORT_2 = bankD[_dout_1_T_11], clock @[RAM.scala 101:32]
              dout[1] <= dout_1_MPORT_2 @[RAM.scala 101:19]
              node _T_58 = bits(io.bytes, 0, 0) @[RAM.scala 102:24]
              when _T_58 : @[RAM.scala 102:28]
                node _dout_2_T_16 = or(rowA, UInt<18>("h00")) @[RAM.scala 103:34]
                node _dout_2_T_17 = bits(_dout_2_T_16, 17, 0) @[RAM.scala 103:34]
                read mport dout_2_MPORT_2 = bankA[_dout_2_T_17], clock @[RAM.scala 103:34]
                dout[2] <= dout_2_MPORT_2 @[RAM.scala 103:21]
                node _dout_3_T_16 = or(rowB, UInt<18>("h00")) @[RAM.scala 104:34]
                node _dout_3_T_17 = bits(_dout_3_T_16, 17, 0) @[RAM.scala 104:34]
                read mport dout_3_MPORT_2 = bankB[_dout_3_T_17], clock @[RAM.scala 104:34]
                dout[3] <= dout_3_MPORT_2 @[RAM.scala 104:21]
                skip @[RAM.scala 102:28]
              else : @[RAM.scala 105:31]
                when io.sign : @[RAM.scala 105:31]
                  node _dout_2_T_18 = bits(dout[1], 7, 7) @[RAM.scala 106:39]
                  node _dout_2_T_19 = bits(_dout_2_T_18, 0, 0) @[Bitwise.scala 72:15]
                  node _dout_2_T_20 = mux(_dout_2_T_19, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                  dout[2] <= _dout_2_T_20 @[RAM.scala 106:21]
                  node _dout_3_T_18 = bits(dout[1], 7, 7) @[RAM.scala 107:39]
                  node _dout_3_T_19 = bits(_dout_3_T_18, 0, 0) @[Bitwise.scala 72:15]
                  node _dout_3_T_20 = mux(_dout_3_T_19, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                  dout[3] <= _dout_3_T_20 @[RAM.scala 107:21]
                  skip @[RAM.scala 105:31]
              skip @[RAM.scala 100:27]
            else : @[RAM.scala 109:29]
              when io.sign : @[RAM.scala 109:29]
                node _dout_1_T_12 = bits(dout[0], 7, 7) @[RAM.scala 110:37]
                node _dout_1_T_13 = bits(_dout_1_T_12, 0, 0) @[Bitwise.scala 72:15]
                node _dout_1_T_14 = mux(_dout_1_T_13, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                dout[1] <= _dout_1_T_14 @[RAM.scala 110:19]
                node _dout_2_T_21 = bits(dout[0], 7, 7) @[RAM.scala 111:37]
                node _dout_2_T_22 = bits(_dout_2_T_21, 0, 0) @[Bitwise.scala 72:15]
                node _dout_2_T_23 = mux(_dout_2_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                dout[2] <= _dout_2_T_23 @[RAM.scala 111:19]
                node _dout_3_T_21 = bits(dout[0], 7, 7) @[RAM.scala 112:37]
                node _dout_3_T_22 = bits(_dout_3_T_21, 0, 0) @[Bitwise.scala 72:15]
                node _dout_3_T_23 = mux(_dout_3_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                dout[3] <= _dout_3_T_23 @[RAM.scala 112:19]
                skip @[RAM.scala 109:29]
            skip @[RAM.scala 98:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_59 = eq(UInt<2>("h03"), _T_7) @[Conditional.scala 37:30]
          when _T_59 : @[Conditional.scala 39:67]
            when io.we : @[RAM.scala 117:18]
              node _T_60 = bits(io.din, 7, 0) @[RAM.scala 118:33]
              node _T_61 = or(rowD, UInt<18>("h00"))
              node _T_62 = bits(_T_61, 17, 0)
              write mport MPORT_12 = bankD[_T_62], clock
              MPORT_12 <= _T_60
              node _T_63 = bits(io.bytes, 1, 1) @[RAM.scala 119:22]
              when _T_63 : @[RAM.scala 119:26]
                node _T_64 = bits(io.din, 15, 8) @[RAM.scala 120:35]
                node _T_65 = or(rowA, UInt<18>("h00"))
                node _T_66 = bits(_T_65, 17, 0)
                write mport MPORT_13 = bankA[_T_66], clock
                MPORT_13 <= _T_64
                node _T_67 = bits(io.bytes, 0, 0) @[RAM.scala 121:24]
                when _T_67 : @[RAM.scala 121:28]
                  node _T_68 = bits(io.din, 23, 16) @[RAM.scala 122:37]
                  node _T_69 = or(rowB, UInt<18>("h00"))
                  node _T_70 = bits(_T_69, 17, 0)
                  write mport MPORT_14 = bankB[_T_70], clock
                  MPORT_14 <= _T_68
                  node _T_71 = bits(io.din, 31, 24) @[RAM.scala 123:37]
                  node _T_72 = or(rowC, UInt<18>("h00"))
                  node _T_73 = bits(_T_72, 17, 0)
                  write mport MPORT_15 = bankC[_T_73], clock
                  MPORT_15 <= _T_71
                  skip @[RAM.scala 121:28]
                skip @[RAM.scala 119:26]
              skip @[RAM.scala 117:18]
            else : @[RAM.scala 126:20]
              node _dout_0_T_6 = or(rowD, UInt<18>("h00")) @[RAM.scala 127:30]
              node _dout_0_T_7 = bits(_dout_0_T_6, 17, 0) @[RAM.scala 127:30]
              read mport dout_0_MPORT_3 = bankD[_dout_0_T_7], clock @[RAM.scala 127:30]
              dout[0] <= dout_0_MPORT_3 @[RAM.scala 127:17]
              node _T_74 = bits(io.bytes, 1, 1) @[RAM.scala 128:22]
              when _T_74 : @[RAM.scala 128:26]
                node _dout_1_T_15 = or(rowA, UInt<18>("h00")) @[RAM.scala 129:32]
                node _dout_1_T_16 = bits(_dout_1_T_15, 17, 0) @[RAM.scala 129:32]
                read mport dout_1_MPORT_3 = bankA[_dout_1_T_16], clock @[RAM.scala 129:32]
                dout[1] <= dout_1_MPORT_3 @[RAM.scala 129:19]
                node _T_75 = bits(io.bytes, 0, 0) @[RAM.scala 130:24]
                when _T_75 : @[RAM.scala 130:28]
                  node _dout_2_T_24 = or(rowB, UInt<18>("h00")) @[RAM.scala 131:34]
                  node _dout_2_T_25 = bits(_dout_2_T_24, 17, 0) @[RAM.scala 131:34]
                  read mport dout_2_MPORT_3 = bankB[_dout_2_T_25], clock @[RAM.scala 131:34]
                  dout[2] <= dout_2_MPORT_3 @[RAM.scala 131:21]
                  node _dout_3_T_24 = or(rowC, UInt<18>("h00")) @[RAM.scala 132:34]
                  node _dout_3_T_25 = bits(_dout_3_T_24, 17, 0) @[RAM.scala 132:34]
                  read mport dout_3_MPORT_3 = bankC[_dout_3_T_25], clock @[RAM.scala 132:34]
                  dout[3] <= dout_3_MPORT_3 @[RAM.scala 132:21]
                  skip @[RAM.scala 130:28]
                else : @[RAM.scala 133:32]
                  when io.sign : @[RAM.scala 133:32]
                    node _dout_2_T_26 = bits(dout[1], 7, 7) @[RAM.scala 134:39]
                    node _dout_2_T_27 = bits(_dout_2_T_26, 0, 0) @[Bitwise.scala 72:15]
                    node _dout_2_T_28 = mux(_dout_2_T_27, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                    dout[2] <= _dout_2_T_28 @[RAM.scala 134:21]
                    node _dout_3_T_26 = bits(dout[1], 7, 7) @[RAM.scala 135:39]
                    node _dout_3_T_27 = bits(_dout_3_T_26, 0, 0) @[Bitwise.scala 72:15]
                    node _dout_3_T_28 = mux(_dout_3_T_27, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                    dout[3] <= _dout_3_T_28 @[RAM.scala 135:21]
                    skip @[RAM.scala 133:32]
                skip @[RAM.scala 128:26]
              else : @[RAM.scala 137:30]
                when io.sign : @[RAM.scala 137:30]
                  node _dout_1_T_17 = bits(dout[0], 7, 7) @[RAM.scala 138:37]
                  node _dout_1_T_18 = bits(_dout_1_T_17, 0, 0) @[Bitwise.scala 72:15]
                  node _dout_1_T_19 = mux(_dout_1_T_18, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                  dout[1] <= _dout_1_T_19 @[RAM.scala 138:19]
                  node _dout_2_T_29 = bits(dout[0], 7, 7) @[RAM.scala 139:37]
                  node _dout_2_T_30 = bits(_dout_2_T_29, 0, 0) @[Bitwise.scala 72:15]
                  node _dout_2_T_31 = mux(_dout_2_T_30, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                  dout[2] <= _dout_2_T_31 @[RAM.scala 139:19]
                  node _dout_3_T_29 = bits(dout[0], 7, 7) @[RAM.scala 140:37]
                  node _dout_3_T_30 = bits(_dout_3_T_29, 0, 0) @[Bitwise.scala 72:15]
                  node _dout_3_T_31 = mux(_dout_3_T_30, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
                  dout[3] <= _dout_3_T_31 @[RAM.scala 140:19]
                  skip @[RAM.scala 137:30]
              skip @[RAM.scala 126:20]
            skip @[Conditional.scala 39:67]
    node _io_dout_T = cat(dout[3], dout[2]) @[RAM.scala 145:22]
    node _io_dout_T_1 = cat(_io_dout_T, dout[1]) @[RAM.scala 145:33]
    node _io_dout_T_2 = cat(_io_dout_T_1, dout[0]) @[RAM.scala 145:44]
    io.dout <= _io_dout_T_2 @[RAM.scala 145:11]
    
  module ROM : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<12>, dout : UInt<32>}
    
    wire rom : SInt<32>[3] @[ROM.scala 13:20]
    rom[0] <= asSInt(UInt<32>("h0500013")) @[ROM.scala 13:20]
    rom[1] <= asSInt(UInt<32>("h0a00893")) @[ROM.scala 13:20]
    rom[2] <= asSInt(UInt<32>("h073")) @[ROM.scala 13:20]
    node _io_dout_T = bits(io.addr, 1, 0)
    node _io_dout_T_1 = asUInt(rom[_io_dout_T]) @[ROM.scala 14:33]
    io.dout <= _io_dout_T_1 @[ROM.scala 14:11]
    
  module PipedRV : 
    input clock : Clock
    input reset : UInt<1>
    output io : {regFile : SInt<32>[32], ecll : UInt<1>}
    
    inst cpu of CPU @[PipedRV.scala 10:19]
    cpu.clock <= clock
    cpu.reset <= reset
    inst ram of RAM @[PipedRV.scala 11:19]
    ram.clock <= clock
    ram.reset <= reset
    inst rom of ROM @[PipedRV.scala 12:19]
    rom.clock <= clock
    rom.reset <= reset
    io.regFile[0] <= cpu.io.regFile[0] @[PipedRV.scala 13:14]
    io.regFile[1] <= cpu.io.regFile[1] @[PipedRV.scala 13:14]
    io.regFile[2] <= cpu.io.regFile[2] @[PipedRV.scala 13:14]
    io.regFile[3] <= cpu.io.regFile[3] @[PipedRV.scala 13:14]
    io.regFile[4] <= cpu.io.regFile[4] @[PipedRV.scala 13:14]
    io.regFile[5] <= cpu.io.regFile[5] @[PipedRV.scala 13:14]
    io.regFile[6] <= cpu.io.regFile[6] @[PipedRV.scala 13:14]
    io.regFile[7] <= cpu.io.regFile[7] @[PipedRV.scala 13:14]
    io.regFile[8] <= cpu.io.regFile[8] @[PipedRV.scala 13:14]
    io.regFile[9] <= cpu.io.regFile[9] @[PipedRV.scala 13:14]
    io.regFile[10] <= cpu.io.regFile[10] @[PipedRV.scala 13:14]
    io.regFile[11] <= cpu.io.regFile[11] @[PipedRV.scala 13:14]
    io.regFile[12] <= cpu.io.regFile[12] @[PipedRV.scala 13:14]
    io.regFile[13] <= cpu.io.regFile[13] @[PipedRV.scala 13:14]
    io.regFile[14] <= cpu.io.regFile[14] @[PipedRV.scala 13:14]
    io.regFile[15] <= cpu.io.regFile[15] @[PipedRV.scala 13:14]
    io.regFile[16] <= cpu.io.regFile[16] @[PipedRV.scala 13:14]
    io.regFile[17] <= cpu.io.regFile[17] @[PipedRV.scala 13:14]
    io.regFile[18] <= cpu.io.regFile[18] @[PipedRV.scala 13:14]
    io.regFile[19] <= cpu.io.regFile[19] @[PipedRV.scala 13:14]
    io.regFile[20] <= cpu.io.regFile[20] @[PipedRV.scala 13:14]
    io.regFile[21] <= cpu.io.regFile[21] @[PipedRV.scala 13:14]
    io.regFile[22] <= cpu.io.regFile[22] @[PipedRV.scala 13:14]
    io.regFile[23] <= cpu.io.regFile[23] @[PipedRV.scala 13:14]
    io.regFile[24] <= cpu.io.regFile[24] @[PipedRV.scala 13:14]
    io.regFile[25] <= cpu.io.regFile[25] @[PipedRV.scala 13:14]
    io.regFile[26] <= cpu.io.regFile[26] @[PipedRV.scala 13:14]
    io.regFile[27] <= cpu.io.regFile[27] @[PipedRV.scala 13:14]
    io.regFile[28] <= cpu.io.regFile[28] @[PipedRV.scala 13:14]
    io.regFile[29] <= cpu.io.regFile[29] @[PipedRV.scala 13:14]
    io.regFile[30] <= cpu.io.regFile[30] @[PipedRV.scala 13:14]
    io.regFile[31] <= cpu.io.regFile[31] @[PipedRV.scala 13:14]
    io.ecll <= cpu.io.ecll @[PipedRV.scala 14:11]
    ram.io.we <= cpu.io.we @[PipedRV.scala 15:13]
    ram.io.din <= cpu.io.doutD @[PipedRV.scala 16:14]
    ram.io.sign <= cpu.io.sign @[PipedRV.scala 17:15]
    ram.io.bytes <= cpu.io.bytes @[PipedRV.scala 18:16]
    ram.io.addr <= cpu.io.addrD @[PipedRV.scala 19:15]
    cpu.io.dinD <= ram.io.dout @[PipedRV.scala 20:15]
    rom.io.addr <= cpu.io.addrI @[PipedRV.scala 21:15]
    cpu.io.dinI <= rom.io.dout @[PipedRV.scala 22:15]
    
